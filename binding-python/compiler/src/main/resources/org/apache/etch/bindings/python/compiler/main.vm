## Copyright 2009 Apache Software Foundation
## Copyright 2007-2008 Cisco Systems Inc.
"""
This file automatically generated by:
  $version
  $now
This file is automatically created for your convenience and will not be
overwritten once it exists! Please edit this file as necessary to implement
your service logic.
#set($i = $intf.name())
#set($intfname = "$i$suffix")
#set($baseclname = "Base$intfname")
#set($clname = "Impl$intfname")
#if ($helper.isServer($mc))
#set($peer = "client")
#set($peerclass = "Remote${i}Client")
#else
#set($peer = "server")
#set($peerclass = "Remote${i}Server")
#end

module $intf.parent().name();
"""
# import ${i}Helper ??
#if ($helper.isServer($mc))
from etch.util.core.io.Transport import *

class Main${i}Listener(${i}Helper.${i}ServerFactory):
    """
    New ${i} Server Factory
    """
    @staticmethod
    def new${i}Server( client ):
        return Impl${i}Server(client)

if __name__=='__main__':
    # TODO Change to correct URI
	uri = "tcp://0.0.0.0:4001";
		
	listener = ${i}Helper.newListener( uri, None, Main${i}Listener() )
    listener.transportControl( Transport.START_AND_WAIT_UP, 4000 )

#else

class Main${i}Client(${i}Helper.${i}ClientFactory):
    """
    New ${i} Client Factory
    """
	
    @staticmethod
    def new${i}Client( server ):
        return Impl${i}Client(server)

if __name__=='__main__':
    # TODO Change to correct URI
	uri = "tcp://localhost:4001";
		
	server = ${i}Helper.newServer( uri, null, Main${i}Client() );

    # Connect to the service
	server._startAndWaitUp( 4000 );

	# TODO Insert Your Code Here

	# Disconnect from the service
	server._stopAndWaitDown( 4000 );
#end
