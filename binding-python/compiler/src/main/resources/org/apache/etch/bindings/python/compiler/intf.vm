##  Licensed to the Apache Software Foundation (ASF) under one   *
##  or more contributor license agreements.  See the NOTICE file *
##  distributed with this work for additional information        *
##  regarding copyright ownership.  The ASF licenses this file   *
##  to you under the Apache License, Version 2.0 (the            *
##  "License"); you may not use this file except in compliance   *
##  with the License.  You may obtain a copy of the License at   *
##                                                               *
##    http://www.apache.org/licenses/LICENSE-2.0                 *
##                                                               *
##  Unless required by applicable law or agreed to in writing,   *
##  software distributed under the License is distributed on an  *
##  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
##  KIND, either express or implied.  See the License for the    *
##  specific language governing permissions and limitations      *
##  under the License.                                           *
"""
This file automatically generated by:
   $version
   $now
 This file is automatically created and should not be edited!

module $intf.parent().name();
"""

#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
#if ($n.hasImport( $helper ))
# ??import $n.getImport( $helper );
#end
#end
#end

#if ($intf.hasDescr())
"""
#foreach( $s in $intf.descr() )
 $s
#end
"""
#end
#set ($sep = "extends")
#if ($hasBaseClass)
class $intf.name()$suffix($intf.name()) :
#set ($sep = ",")
#else
class $intf.name()$suffix :
#end
#foreach( $n in $intf.iterator() )
#if ($n.isMixin())
	# $sep $n.fqname()$suffix
#set ($sep = ",")
#end
#end
#if (!$intf.hasMessageDirection($mc))
	# no $mc direction items defined.
#end


#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if ($n.isMsgDir($mc))
	def $n.name() (self, 
#set( $sep = "" )
#foreach( $p in $n.iterator() )
		$sep$helper.getTypeName( $p.type() ) $p.name()
#set( $sep = ", " )
#end
	    ):
#if (!$n.isHidden())
	    """
#foreach( $s in $n.descr() )
	    $s
#end
#foreach( $p in $n.iterator() )
#set($first = true)
#foreach( $s in $p.descr() )
#if ($first)
#set($first = false)
	    @param $p.name() $s
#else
	    $s
#end
#end
#end
#if ($n.hasReturn())
#set($first = true)
#foreach( $s in $n.returnDescr() )
#if ($first)
#set($first = false)
	    @return $s
#else
	    $s
#end
#end
#end
#foreach($t in $n.thrown().iterator())
#set($first = true)
#foreach( $s in $t.descr() )
#if ($first)
#set($first = false)
	    @throws $t.name() $s
#else
	    $s
#end
#end
#end
	    """
        raise AbstractMethodException
#end
#end
#elseif ($n.isConstant())
#if (!$hasBaseClass)
	$n.name() = $helper.getTypeValue( $n.type(), $n.value() )
#if ($n.hasDescr())
    """
#foreach( $s in $n.descr() )
	$s
#end
    """
#end    
#end

#elseif ($n.isEnumx())
#if (!$hasBaseClass)
#if ($n.hasDescr())
#foreach( $s in $n.descr() )
	# $s
#end
#end
	$n.name() = {
#set( $sep = "" )
#foreach( $i in $n.iterator() )
#foreach( $s in $i.descr() )
		# $s
#end
		$sep$i.name() : r'$i.name()'
#set( $sep = ", " )
#end
	}
#end

#elseif ($n.isExtern())
## ignore extern
#elseif ($n.isMixin())
## ignore mixin
#elseif ($n.isStruct() || $n.isExcept())
#if (!$hasBaseClass)
#set( $sep = "_"  )    
class $intf.name()$sep$n.name(
#set( $sep = ", " )
#if( $n.hasExtends() )
    $n.getExtends().name()
#else
#if( $n.isExcept() )
#if( $n.isUnchecked() )
	$sep RuntimeException
#else
	$sep Exception
#end
#end
#end
	):
#if ($n.hasDescr())
	"""
#foreach( $s in $n.descr() )
	$s
#end
	"""
#end

#if (!$n.hasAnyParameters())
    def __init__(self):
        """
		Constructs the $n.name(). Don't init any fields.
		"""
        pass

#else ($n.hasAnyParameters())
	def __init__(self, 
#set( $sep = "" )
#foreach( $i in $n.getAllParameters() )
			$sep$i.name() = None
#set( $sep = ", " )
#end
		):
        """
		Constructs the $n.name().
#foreach( $i in $n.getAllParameters() )
#set( $sep = "@param " )
#foreach( $s in $i.descr() )
		$sep$i.name() $s
#set( $sep = "" )
#end
#end
		"""
#if( $n.hasExtends() )
		# TODO: fix SUPER
        super(
#set( $sep = "" )
#foreach( $i in $n.getExtends().getAllParameters() )
		    $sep$i.name()
#set( $sep = ", " )
#end
		)
#end
#foreach( $i in $n.getParameters() )
			self.$i.name() = $i.name()
#end
#end
#if( $n.isExcept() )

    def getMessage(self):
	    return $helper.formatString( $n, true )
#else

	def __repr__(self):
		return $helper.formatString( $n, false )
#end
#foreach( $i in $n.iterator() )

#if( $i.hasDescr())
#foreach( $s in $i.descr() )
	# $s
#end
#end
		
    def $helper.getGetterName( $i.name() ) (self):
        """
		Gets the value.
#foreach( $s in $i.descr() )
		$s
#end
        @return the value.
		"""
		return self.$i.name()

	def $helper.getSetterName($i.name()) (self, value):
        """
	    Sets the value.
#foreach( $s in $i.descr() )
		$s
#end
		    
        @param value the value.
		"""
		self.$i.name() = value;
#end

#end
#elseif ($n.isBuiltin())
## nothing to do.
#else
# *** intf.vm: don't know what to do with $n ***
#end
#end
