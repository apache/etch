// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / java 1.1.0-incubating (LOCAL-0)
//   Sat Feb 21 22:11:51 CST 2009
// This file is automatically created and should not be edited!

package etch.services.ns;


/**
 * Call to message translator for NameServiceServer.
 */
@SuppressWarnings("unused")
public final class RemoteNameServiceServer extends RemoteNameService implements NameServiceServer
{
	/**
	 * Constructs the RemoteNameServiceServer.
	 *
	 * @param svc
	 * @param vf
	 */
	public RemoteNameServiceServer( org.apache.etch.bindings.java.support.DeliveryService svc, org.apache.etch.bindings.java.msg.ValueFactory vf )
	{
		super( svc, vf );
	}

	/**
	 * {@link _Async} class instance used to hide asynchronous message
	 * implementation. Use this to invoke the asynchronous message
	 * implementations.
	 */
	public final _Async _async = new _Async();

	/**
	 * {@link _Async} class instance used to hide asynchronous message
	 * implementation. This is here for backwards compatibility only, use
	 * {@link #_async} instead.
	 * @deprecated
	 */
	@Deprecated
	public final _Async _inner = _async;

	public final etch.services.ns.NameService.Entry lookup(
		String source
	)
	{
		return
		_async._end_lookup( _async._begin_lookup(
			source
		) );
	}

	public final etch.services.ns.NameService.Entry[] find(
		String query
		, Integer offset
		, Integer count
	)
	{
		return
		_async._end_find( _async._begin_find(
			query
			, offset
			, count
		) );
	}

	public final void register(
		String sourceUri
		, java.util.Map<?, ?> qualities
		, String targetUri
		, Integer ttl
	)
	{
		_async._end_register( _async._begin_register(
			sourceUri
			, qualities
			, targetUri
			, ttl
		) );
	}

	public final void registerBulk(
		etch.services.ns.NameService.Entry[] entries
	)
	{
		_async._end_registerBulk( _async._begin_registerBulk(
			entries
		) );
	}

	public final void unregister(
		String sourceUri
		, Boolean deleteEntry
	)
	{
		_async._end_unregister( _async._begin_unregister(
			sourceUri
			, deleteEntry
		) );
	}

	public final void subscribe(
		String query
	)
	{
		_async._end_subscribe( _async._begin_subscribe(
			query
		) );
	}

	public final void unsubscribe(
		String query
	)
	{
		_async._end_unsubscribe( _async._begin_unsubscribe(
			query
		) );
	}

	public final void unsubscribeAll(
	)
	{
		_async._end_unsubscribeAll( _async._begin_unsubscribeAll(
		) );
	}

	public final Boolean canLookup(
		String source
	)
	{
		return
		_async._end_canLookup( _async._begin_canLookup(
			source
		) );
	}

	public final Boolean canFind(
		String query
	)
	{
		return
		_async._end_canFind( _async._begin_canFind(
			query
		) );
	}

	public final Boolean canRegister(
		String sourceUri
		, java.util.Map<?, ?> qualities
		, String targetUri
	)
	{
		return
		_async._end_canRegister( _async._begin_canRegister(
			sourceUri
			, qualities
			, targetUri
		) );
	}

	public final Boolean canUnregister(
		String sourceUri
		, Boolean deleteEntry
	)
	{
		return
		_async._end_canUnregister( _async._begin_canUnregister(
			sourceUri
			, deleteEntry
		) );
	}

	public final Boolean canRegisterBulk(
		etch.services.ns.NameService.Entry[] entries
	)
	{
		return
		_async._end_canRegisterBulk( _async._begin_canRegisterBulk(
			entries
		) );
	}

	/**
	 * Asynchronous implementation of service methods.
	 */
	public final class _Async extends RemoteNameService._Async
	{

		/**
		 * Begins a call to lookup.
		 *
		 * Look up an entry by matching it against the sourceUri.
		 * 
		 * @param source source uri
		 * 
		 * @return mailbox used to retrieve the result using _end_lookup.
		 * @see RemoteNameServiceServer#lookup
		 * @see #_end_lookup
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_lookup(
			String source
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_lookup );
			_msg.put( ValueFactoryNameService._mf_source, source );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to lookup.
		 *
		 * Look up an entry by matching it against the sourceUri.
		 * 
		 * @param mb mailbox returned by _begin_lookup.
		 * @return entry matching the source uri. In the case of an
		 * absent instance name or qualifier, the implementation
		 * can decide which Entry to return.
		 *
		 * @see RemoteNameServiceServer#lookup
		 * @see #_begin_lookup
		 */
		public final etch.services.ns.NameService.Entry _end_lookup( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				return
					(etch.services.ns.NameService.Entry)
						_endcall( mb,
							ValueFactoryNameService._mt_etch_services_ns_NameService__result_lookup );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to find.
		 *
		 * Looks up entries by matching them against the query string. Entries are
		 * returned in a stable and consistent order, increasing alphabetical by
		 * servicename, instancename, and scheme, and then increasing numerical by
		 * priority. If a scheme search term appears with a list, schemes are
		 * returned in the specified order (e.g., scheme='tls,tcp').
		 * 
		 * @param query a sql-like query expression using the elements of the
		 * sourceUri, targetUri, and qualities. If query is null or the empty
		 * string, all entries are matched.
		 * 
		 * @param offset offset in the list of matched items of the first item to
		 * return. This parameter and the count parameter are used to step through
		 * the result set when there are many results.
		 * 
		 * @param count number of items to return.
		 * 
		 * @return mailbox used to retrieve the result using _end_find.
		 * @see RemoteNameServiceServer#find
		 * @see #_end_find
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_find(
			String query
			, Integer offset
			, Integer count
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_find );
			_msg.put( ValueFactoryNameService._mf_query, query );
			_msg.put( ValueFactoryNameService._mf_offset, offset );
			_msg.put( ValueFactoryNameService._mf_count, count );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to find.
		 *
		 * Looks up entries by matching them against the query string. Entries are
		 * returned in a stable and consistent order, increasing alphabetical by
		 * servicename, instancename, and scheme, and then increasing numerical by
		 * priority. If a scheme search term appears with a list, schemes are
		 * returned in the specified order (e.g., scheme='tls,tcp').
		 * 
		 * @param mb mailbox returned by _begin_find.
		 * @return entries matching query. If you requested 10 items and 10 are
		 * returned, there could be more. To get the next batch, add results.length
		 * to offset and call find again:
		 * 
		 * int i = 0;
		 * int n = 10;
		 * Entry[] results;
		 * while ((results = service.find( null, i, n )).length > 0)
		 * {
		 *   for (Entry e: results)
		 *     processEntry( e );
		 *   if (results.length < n)
		 *     break;
		 *   i += results.length;
		 * }
		 *
		 * @see RemoteNameServiceServer#find
		 * @see #_begin_find
		 */
		public final etch.services.ns.NameService.Entry[] _end_find( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				return
					(etch.services.ns.NameService.Entry[])
						_endcall( mb,
							ValueFactoryNameService._mt_etch_services_ns_NameService__result_find );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to register.
		 *
		 * Adds or updates the specified entry. The given parameters replace any
		 * existing values in an Entry whose key is sourceUri, whereas who and
		 * lastUpdate are set to the current user and current date / time,
		 * respectively.
		 * 
		 * @param sourceUri the uri describing the service. The uri should be of
		 * the form "servicename/instancename/scheme[/priority]", where servicename
		 * is a valid fully qualified service name (e.g.,
		 * etch.services.ns.NameService"), instancename is a valid etch identifier
		 * (e.g, fred, alice01), scheme is a valid uri scheme (e.g., tcp, tls), and
		 * priority is an integer >= 1. If priority is omitted, it is defaulted to
		 * 1.
		 * 
		 * @param qualities a map which may be used to describe additional features
		 * of the entry, such as purpose, licenses, capacity, location, owner,
		 * whatever. Query strings may test values of qualities using a variety of
		 * sql-like operators. Qualities may be null.
		 * 
		 * @param targetUri the uri describing the contact information for the
		 * service.
		 * 
		 * @param ttl the lifetime of the entry specified as seconds. 0 means
		 * forever, -1 means remove immediately when the connection to the
		 * NameService is dropped.
		 * @return mailbox used to retrieve the result using _end_register.
		 * @see RemoteNameServiceServer#register
		 * @see #_end_register
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_register(
			String sourceUri
			, java.util.Map<?, ?> qualities
			, String targetUri
			, Integer ttl
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_register );
			_msg.put( ValueFactoryNameService._mf_sourceUri, sourceUri );
			_msg.put( ValueFactoryNameService._mf_qualities, qualities );
			_msg.put( ValueFactoryNameService._mf_targetUri, targetUri );
			_msg.put( ValueFactoryNameService._mf_ttl, ttl );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to register.
		 *
		 * Adds or updates the specified entry. The given parameters replace any
		 * existing values in an Entry whose key is sourceUri, whereas who and
		 * lastUpdate are set to the current user and current date / time,
		 * respectively.
		 * 
		 * @param mb mailbox returned by _begin_register.
		 *
		 * @see RemoteNameServiceServer#register
		 * @see #_begin_register
		 */
		public final void _end_register( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				_endcall( mb,
					ValueFactoryNameService._mt_etch_services_ns_NameService__result_register  );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to registerBulk.
		 *
		 * Registers a number of entries all in one operation. Identical to calling
		 * register with each entry in turn.
		 * 
		 * @param entries a sequence of Entry records with sourceUri, targetUri,
		 * qualities, and ttl as specified in register() above. Who and lastUpdate
		 * fields are ignored.
		 * @return mailbox used to retrieve the result using _end_registerBulk.
		 * @see RemoteNameServiceServer#registerBulk
		 * @see #_end_registerBulk
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_registerBulk(
			etch.services.ns.NameService.Entry[] entries
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_registerBulk );
			_msg.put( ValueFactoryNameService._mf_entries, entries );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to registerBulk.
		 *
		 * Registers a number of entries all in one operation. Identical to calling
		 * register with each entry in turn.
		 * 
		 * @param mb mailbox returned by _begin_registerBulk.
		 *
		 * @see RemoteNameServiceServer#registerBulk
		 * @see #_begin_registerBulk
		 */
		public final void _end_registerBulk( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				_endcall( mb,
					ValueFactoryNameService._mt_etch_services_ns_NameService__result_registerBulk  );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to unregister.
		 *
		 * Removes the specified entry.
		 * 
		 * @param sourceUri the uri describing the service.
		 * @return mailbox used to retrieve the result using _end_unregister.
		 * @see RemoteNameServiceServer#unregister
		 * @see #_end_unregister
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_unregister(
			String sourceUri
			, Boolean deleteEntry
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_unregister );
			_msg.put( ValueFactoryNameService._mf_sourceUri, sourceUri );
			_msg.put( ValueFactoryNameService._mf_deleteEntry, deleteEntry );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to unregister.
		 *
		 * Removes the specified entry.
		 * 
		 * @param mb mailbox returned by _begin_unregister.
		 *
		 * @see RemoteNameServiceServer#unregister
		 * @see #_begin_unregister
		 */
		public final void _end_unregister( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				_endcall( mb,
					ValueFactoryNameService._mt_etch_services_ns_NameService__result_unregister  );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to subscribe.
		 *
		 * Adds a request for notification of changes to entries matching the query.
		 * The current value of all matching entries is delivered via entryChanged
		 * client message, as well as any updates or new entries.
		 * 
		 * @param query a sql-like query expression using the elements of the
		 * sourceUri, targetUri, and qualities. If query is null or the empty
		 * string, all entries are matched.
		 * @return mailbox used to retrieve the result using _end_subscribe.
		 * @see RemoteNameServiceServer#subscribe
		 * @see #_end_subscribe
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_subscribe(
			String query
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_subscribe );
			_msg.put( ValueFactoryNameService._mf_query, query );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to subscribe.
		 *
		 * Adds a request for notification of changes to entries matching the query.
		 * The current value of all matching entries is delivered via entryChanged
		 * client message, as well as any updates or new entries.
		 * 
		 * @param mb mailbox returned by _begin_subscribe.
		 *
		 * @see RemoteNameServiceServer#subscribe
		 * @see #_begin_subscribe
		 */
		public final void _end_subscribe( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				_endcall( mb,
					ValueFactoryNameService._mt_etch_services_ns_NameService__result_subscribe  );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to unsubscribe.
		 *
		 * Removes a request for notification of changes to entries matching the
		 * query.
		 * 
		 * @param query a query previously passed to subscribe. The string must
		 * match exactly.
		 * @return mailbox used to retrieve the result using _end_unsubscribe.
		 * @see RemoteNameServiceServer#unsubscribe
		 * @see #_end_unsubscribe
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_unsubscribe(
			String query
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_unsubscribe );
			_msg.put( ValueFactoryNameService._mf_query, query );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to unsubscribe.
		 *
		 * Removes a request for notification of changes to entries matching the
		 * query.
		 * 
		 * @param mb mailbox returned by _begin_unsubscribe.
		 *
		 * @see RemoteNameServiceServer#unsubscribe
		 * @see #_begin_unsubscribe
		 */
		public final void _end_unsubscribe( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				_endcall( mb,
					ValueFactoryNameService._mt_etch_services_ns_NameService__result_unsubscribe  );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to unsubscribeAll.
		 *
		 * Removes all requests for notification of changes to entries. This
		 * operation is implicitly performed when the connection to the NameService
		 * is dropped.
		 * @return mailbox used to retrieve the result using _end_unsubscribeAll.
		 * @see RemoteNameServiceServer#unsubscribeAll
		 * @see #_end_unsubscribeAll
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_unsubscribeAll(
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_unsubscribeAll );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to unsubscribeAll.
		 *
		 * Removes all requests for notification of changes to entries. This
		 * operation is implicitly performed when the connection to the NameService
		 * is dropped.
		 * @param mb mailbox returned by _begin_unsubscribeAll.
		 *
		 * @see RemoteNameServiceServer#unsubscribeAll
		 * @see #_begin_unsubscribeAll
		 */
		public final void _end_unsubscribeAll( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				_endcall( mb,
					ValueFactoryNameService._mt_etch_services_ns_NameService__result_unsubscribeAll  );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to canLookup.
		 *
		 * Tests whether the current user is authorized to lookup the source.
		 * @param source the complete specification api/instance/scheme.
		 * @return mailbox used to retrieve the result using _end_canLookup.
		 * @see RemoteNameServiceServer#canLookup
		 * @see #_end_canLookup
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_canLookup(
			String source
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_canLookup );
			_msg.put( ValueFactoryNameService._mf_source, source );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to canLookup.
		 *
		 * Tests whether the current user is authorized to lookup the source.
		 * @param mb mailbox returned by _begin_canLookup.
		 *
		 * @see RemoteNameServiceServer#canLookup
		 * @see #_begin_canLookup
		 */
		public final Boolean _end_canLookup( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				return
					(Boolean)
						_endcall( mb,
							ValueFactoryNameService._mt_etch_services_ns_NameService__result_canLookup );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to canFind.
		 *
		 * Tests whether the current user is authorized to run the query.
		 * 
		 * @param query a sql-like query expression using the elements of the
		 * sourceUri, targetUri, and qualities. If query is null or the empty
		 * string, all entries are matched.
		 * 
		 * @return mailbox used to retrieve the result using _end_canFind.
		 * @see RemoteNameServiceServer#canFind
		 * @see #_end_canFind
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_canFind(
			String query
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_canFind );
			_msg.put( ValueFactoryNameService._mf_query, query );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to canFind.
		 *
		 * Tests whether the current user is authorized to run the query.
		 * 
		 * @param mb mailbox returned by _begin_canFind.
		 * @return true if the current user is authorized to run the query.
		 *
		 * @see RemoteNameServiceServer#canFind
		 * @see #_begin_canFind
		 */
		public final Boolean _end_canFind( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				return
					(Boolean)
						_endcall( mb,
							ValueFactoryNameService._mt_etch_services_ns_NameService__result_canFind );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to canRegister.
		 *
		 * Tests whether the current user is authorized to register the service.
		 * 
		 * @param sourceUri the uri describing the service.
		 * 
		 * @param qualities a map which may be used to describe additional features
		 * of the entry.
		 * 
		 * @param targetUri the actual uri of the service
		 * 
		 * @return mailbox used to retrieve the result using _end_canRegister.
		 * @see RemoteNameServiceServer#canRegister
		 * @see #_end_canRegister
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_canRegister(
			String sourceUri
			, java.util.Map<?, ?> qualities
			, String targetUri
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_canRegister );
			_msg.put( ValueFactoryNameService._mf_sourceUri, sourceUri );
			_msg.put( ValueFactoryNameService._mf_qualities, qualities );
			_msg.put( ValueFactoryNameService._mf_targetUri, targetUri );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to canRegister.
		 *
		 * Tests whether the current user is authorized to register the service.
		 * 
		 * @param mb mailbox returned by _begin_canRegister.
		 * @return true if the current user is authorized to register the service.
		 *
		 * @see RemoteNameServiceServer#canRegister
		 * @see #_begin_canRegister
		 */
		public final Boolean _end_canRegister( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				return
					(Boolean)
						_endcall( mb,
							ValueFactoryNameService._mt_etch_services_ns_NameService__result_canRegister );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to canUnregister.
		 *
		 * Tests whether the current user is authorized to unregister the service.
		 * 
		 * @param sourceUri the uri describing the service.
		 * 
		 * @param deleteEntry if true, the entire entry matching the sourceUri
		 * would be deleted. if false, only the target uri matching the sourceUri
		 * would be deleted, but the entry would be intact.
		 * 
		 * @return mailbox used to retrieve the result using _end_canUnregister.
		 * @see RemoteNameServiceServer#canUnregister
		 * @see #_end_canUnregister
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_canUnregister(
			String sourceUri
			, Boolean deleteEntry
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_canUnregister );
			_msg.put( ValueFactoryNameService._mf_sourceUri, sourceUri );
			_msg.put( ValueFactoryNameService._mf_deleteEntry, deleteEntry );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to canUnregister.
		 *
		 * Tests whether the current user is authorized to unregister the service.
		 * 
		 * @param mb mailbox returned by _begin_canUnregister.
		 * @return true if the current user is authorized to register the service.
		 *
		 * @see RemoteNameServiceServer#canUnregister
		 * @see #_begin_canUnregister
		 */
		public final Boolean _end_canUnregister( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				return
					(Boolean)
						_endcall( mb,
							ValueFactoryNameService._mt_etch_services_ns_NameService__result_canUnregister );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		/**
		 * Begins a call to canRegisterBulk.
		 *
		 * Tests whether the current user is authorized to register the entries.
		 * This is the same as:
		 * 
		 * for (Entry entry: entries)
		 *   if (!canRegister( entry.sourceUri, entry.qualities ))
		 *     return false;
		 * return true;
		 * 
		 * @param entries a sequence of Entry records with sourceUri, targetUri,
		 * qualities, and ttl as specified in register() above. Who and lastUpdate
		 * fields are ignored.
		 * 
		 * @return mailbox used to retrieve the result using _end_canRegisterBulk.
		 * @see RemoteNameServiceServer#canRegisterBulk
		 * @see #_end_canRegisterBulk
		 */
		public final org.apache.etch.bindings.java.support.Mailbox _begin_canRegisterBulk(
			etch.services.ns.NameService.Entry[] entries
		)
		{
			org.apache.etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryNameService._mt_etch_services_ns_NameService_canRegisterBulk );
			_msg.put( ValueFactoryNameService._mf_entries, entries );
			return _begincall( _msg );
		}
		
		/**
		 * Ends a call to canRegisterBulk.
		 *
		 * Tests whether the current user is authorized to register the entries.
		 * This is the same as:
		 * 
		 * for (Entry entry: entries)
		 *   if (!canRegister( entry.sourceUri, entry.qualities ))
		 *     return false;
		 * return true;
		 * 
		 * @param mb mailbox returned by _begin_canRegisterBulk.
		 * @return true if the current user is authorized to register the entries.
		 * This is an all or nothing proposition.
		 *
		 * @see RemoteNameServiceServer#canRegisterBulk
		 * @see #_begin_canRegisterBulk
		 */
		public final Boolean _end_canRegisterBulk( org.apache.etch.bindings.java.support.Mailbox mb )
		{
			try
			{
				return
					(Boolean)
						_endcall( mb,
							ValueFactoryNameService._mt_etch_services_ns_NameService__result_canRegisterBulk );
			}
			catch ( Exception e )
			{
				if (e instanceof RuntimeException) throw (RuntimeException) e;
				throw new RuntimeException( "unexpected exception from peer: "+e, e );
			}
		}

		// Mixin Methods
	}
}
