// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / java 1.1.0-incubating (LOCAL-0)
//   Sat Feb 21 22:11:51 CST 2009
// This file is automatically created and should not be edited!

package etch.services.ns;

import java.io.Serializable;


/**
 * The NameService provides translation from an abstract name for a service to a
 * uri that may be used to contact the service. A given service may offer
 * several different connection schemes, and a client may only support a subset
 * of those. So, when a client wishes to connect to a service, it may query
 * the NameService with both abstract name and desired schemes in order to find
 * a suitable match.
 * 
 * Some example queries:
 * 
 * All services with servicename='Foo' and instancename='bar' and qualifier='tcp'
 * 
 *   sourceUri='Foo/bar/tcp'
 * 
 * Same as the query above, but written out longhand:
 * 
 *   servicename='Foo' and instancename='bar' and qualifier='tcp'
 * 
 * Fully qualified sourceUri:
 * 
 *   sourceUri='Foo/bar/tcp/1'
 * 
 * Any instance of service Foo located in Austin, TX:
 * 
 *   servicename='Foo' and qualities.location='Austin, TX'
 * 
 * Instances of service Foo with capacity >= 400:
 * 
 *   servicename='Foo' and qualities.capacity>=400
 * 
 * Relative operations on qualities require that the quality be present and be
 * comparable (with mixed types some type promotion is supported). But you might
 * be surprised, qualities which are absent will give a negative comparison no
 * matter which sense is used: both qualities.x > 50 and qualities.x < 50 are
 * false whenever qualities.x is null. Consider this test: not qualities.x < 50.
 * This is not the same as qualities.x >= 50. It is the same as qualities.x =
 * null or qualities.x >= 50.
 */
@SuppressWarnings("unused")
public interface NameService
{
	/**
	 * An entry describing a service.
	 */
	@SuppressWarnings("serial")
	public class Entry
		implements Serializable
	{
		/**
		 * Constructs the Entry. Don't init any fields.
		 */
		public Entry()
		{
			// don't init any fields.
		}

		/**
		 * Constructs the Entry.
		 * @param sourceUri A service description uri, composed of
		 * sourceUri servicename/instancename/qualifier[/priority].
		 * @param qualities Qualities of this service instance.
		 * @param targetUri Etch service connection uri, for example
		 * targetUri tcp://localhost:9000?filter=KeepAlive
		 * @param ttl Lifetime in seconds from last update.
		 * @param who Who created or last update.
		 * @param lastUpdate Date / time of create or last update.
		 * @param removed Flag indicating entry has been removed.
		 */
		public Entry
		(
			String sourceUri
			, java.util.Map<?, ?> qualities
			, String targetUri
			, Integer ttl
			, String who
			, java.util.Date lastUpdate
			, Boolean removed
		)
		{
			this.sourceUri = sourceUri;
			this.qualities = qualities;
			this.targetUri = targetUri;
			this.ttl = ttl;
			this.who = who;
			this.lastUpdate = lastUpdate;
			this.removed = removed;
		}

		@Override
		public String toString()
		{
			return String.format( "Entry(sourceUri=%s; qualities=%s; targetUri=%s; ttl=%s; who=%s; lastUpdate=%s; removed=%s)", sourceUri, qualities, targetUri, ttl, who, lastUpdate, removed );
		}

		/**
		 * A service description uri, composed of
		 * servicename/instancename/qualifier[/priority].
		 */
		public String sourceUri;

		/**
		 * Gets the value.
		 *
		 * A service description uri, composed of
		 * servicename/instancename/qualifier[/priority].
		 *
		 * @return the value.
		 */
		public String getSourceUri()
		{
			return sourceUri;
		}

		/**
		 * Sets the value.
		 *
		 * A service description uri, composed of
		 * servicename/instancename/qualifier[/priority].
		 *
		 * @param value the value.
		 */
		public void setSourceUri( String value )
		{
			this.sourceUri = value;
		}

		/**
		 * Qualities of this service instance.
		 */
		public java.util.Map<?, ?> qualities;

		/**
		 * Gets the value.
		 *
		 * Qualities of this service instance.
		 *
		 * @return the value.
		 */
		public java.util.Map<?, ?> getQualities()
		{
			return qualities;
		}

		/**
		 * Sets the value.
		 *
		 * Qualities of this service instance.
		 *
		 * @param value the value.
		 */
		public void setQualities( java.util.Map<?, ?> value )
		{
			this.qualities = value;
		}

		/**
		 * Etch service connection uri, for example
		 * tcp://localhost:9000?filter=KeepAlive
		 */
		public String targetUri;

		/**
		 * Gets the value.
		 *
		 * Etch service connection uri, for example
		 * tcp://localhost:9000?filter=KeepAlive
		 *
		 * @return the value.
		 */
		public String getTargetUri()
		{
			return targetUri;
		}

		/**
		 * Sets the value.
		 *
		 * Etch service connection uri, for example
		 * tcp://localhost:9000?filter=KeepAlive
		 *
		 * @param value the value.
		 */
		public void setTargetUri( String value )
		{
			this.targetUri = value;
		}

		/**
		 * Lifetime in seconds from last update.
		 */
		public Integer ttl;

		/**
		 * Gets the value.
		 *
		 * Lifetime in seconds from last update.
		 *
		 * @return the value.
		 */
		public Integer getTtl()
		{
			return ttl;
		}

		/**
		 * Sets the value.
		 *
		 * Lifetime in seconds from last update.
		 *
		 * @param value the value.
		 */
		public void setTtl( Integer value )
		{
			this.ttl = value;
		}

		/**
		 * Who created or last update.
		 */
		public String who;

		/**
		 * Gets the value.
		 *
		 * Who created or last update.
		 *
		 * @return the value.
		 */
		public String getWho()
		{
			return who;
		}

		/**
		 * Sets the value.
		 *
		 * Who created or last update.
		 *
		 * @param value the value.
		 */
		public void setWho( String value )
		{
			this.who = value;
		}

		/**
		 * Date / time of create or last update.
		 */
		public java.util.Date lastUpdate;

		/**
		 * Gets the value.
		 *
		 * Date / time of create or last update.
		 *
		 * @return the value.
		 */
		public java.util.Date getLastUpdate()
		{
			return lastUpdate;
		}

		/**
		 * Sets the value.
		 *
		 * Date / time of create or last update.
		 *
		 * @param value the value.
		 */
		public void setLastUpdate( java.util.Date value )
		{
			this.lastUpdate = value;
		}

		/**
		 * Flag indicating entry has been removed.
		 */
		public Boolean removed;

		/**
		 * Gets the value.
		 *
		 * Flag indicating entry has been removed.
		 *
		 * @return the value.
		 */
		public Boolean getRemoved()
		{
			return removed;
		}

		/**
		 * Sets the value.
		 *
		 * Flag indicating entry has been removed.
		 *
		 * @param value the value.
		 */
		public void setRemoved( Boolean value )
		{
			this.removed = value;
		}
	}

}
