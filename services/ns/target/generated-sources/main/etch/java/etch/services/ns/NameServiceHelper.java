// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / java 1.1.0-incubating (LOCAL-0)
//   Sat Feb 21 22:11:51 CST 2009
// This file is automatically created and should not be edited!

package etch.services.ns;

import org.apache.etch.bindings.java.support.DeliveryService;
import org.apache.etch.bindings.java.support.Pool;
import org.apache.etch.bindings.java.support.ServerFactory;
import org.apache.etch.bindings.java.msg.ValueFactory;
import org.apache.etch.bindings.java.support.DefaultServerFactory;
import org.apache.etch.util.core.io.Transport;
import org.apache.etch.bindings.java.support.TransportFactory;
import org.apache.etch.bindings.java.support.TransportHelper;
import org.apache.etch.bindings.java.transport.DefaultDeliveryService;
import org.apache.etch.bindings.java.transport.MailboxManager;
import org.apache.etch.bindings.java.transport.PlainMailboxManager;
import org.apache.etch.bindings.java.transport.TransportMessage;
import org.apache.etch.util.Resources;
import org.apache.etch.util.URL;

/**
 * Transport helper for NameService. All methods are static.
 */
abstract public class NameServiceHelper extends TransportHelper
{

	/**
	 * Constructs a new server session listener per specifications in uri and
	 * resources. This listener will accept requests from clients for new server
	 * sessions.
	 *
	 * @param uri contains specifications for the server session listener and
	 * for the server session transport stack.
	 *
	 * @param resources additional resources to aid in constructing new server
	 * sessions.
	 *
	 * @param implFactory factory used to construct a new instance implementing
	 * NameServiceServer. The new instance will receive and process messages from
	 * the client session.
	 *
	 * @return a server session listener.
	 *
	 * @throws Exception
	 */
	public static ServerFactory newListener( final String uri,
		Resources resources, final NameServiceServerFactory implFactory )
		throws Exception
	{
		final Resources res = initResources( resources );
		final URL u = new URL( uri );
		
		final Transport<ServerFactory> listener = TransportFactory.getListener( uri, res );
		
		return new DefaultServerFactory( listener, implFactory )
		{
			public void newServer( String uri, Resources resources,
				TransportMessage transport ) throws Exception
			{
				ValueFactory vf = (ValueFactory) resources.get( Transport.VALUE_FACTORY );
				MailboxManager x = new PlainMailboxManager( transport, u, res );
				DeliveryService d = new DefaultDeliveryService( x, u, res );
				RemoteNameServiceClient client = new RemoteNameServiceClient( d, vf );
				NameServiceServer server = implFactory.newNameServiceServer( client );
				Pool qp = (Pool) res.get( QUEUED_POOL );
				Pool fp = (Pool) res.get( FREE_POOL );
				new StubNameServiceServer( d, server, qp, fp );
				client._start();
			}

			public ValueFactory newValueFactory()
			{
				return new ValueFactoryNameService( uri );
			}
			
			@Override
			public String toString()
			{
				return "NameServiceHelper.ServerFactory/" + listener;
			}
		};
	}

	/**
	 * Factory used by
	 * {@link NameServiceHelper#newListener(String, Resources, NameServiceServerFactory)}
	 * to construct a new instance implementing {@link NameServiceServer}. The new
	 * instance will receive and process messages from the client session.
	 */
	public interface NameServiceServerFactory
	{
		/**
		 * Constructs a new instance implementing NameServiceServer. The new
		 * instance will receive and process messages from the client session.
		 *
		 * @param client an instance of RemoteNameServiceClient which may be used to
		 * send messages to the client session.
		 * @return a new instance implementing NameServiceServer (typically
		 * ImplNameServiceServer).
		 * @throws Exception
		 */
		public NameServiceServer newNameServiceServer( RemoteNameServiceClient client )
			throws Exception;
	}

	/**
	 * Constructs a new client session per specifications in uri and resources.
	 * 
	 * @param uri contains specifications for the client session transport
	 * stack.
	 * 
	 * @param resources additional resources to aid in constructing new client
	 * sessions.
	 * 
	 * @param implFactory factory used to construct a new instance implementing
	 * NameServiceClient. The new instance will receive and process messages from
	 * the server session.
	 * 
	 * @return an instance of RemoteNameServiceServer initialized by uri and
	 * resources which may be used to send messages to the server session.
	 * 
	 * @throws Exception
	 */
	public static RemoteNameServiceServer newServer( String uri,
		Resources resources, NameServiceClientFactory implFactory )
		throws Exception
	{
		final Resources res = initResources( resources );
		
		final ValueFactoryNameService vf = new ValueFactoryNameService( uri );
		res.put( Transport.VALUE_FACTORY, vf );
		
		URL u = new URL( uri );
		
		TransportMessage m = TransportFactory.getTransport( uri, res );
		MailboxManager r = new PlainMailboxManager( m, u, resources );
		DeliveryService d = new DefaultDeliveryService( r, u, resources );
		RemoteNameServiceServer server = new RemoteNameServiceServer( d, vf );
		NameServiceClient client = implFactory.newNameServiceClient( server );
		Pool qp = (Pool) res.get( QUEUED_POOL );
		Pool fp = (Pool) res.get( FREE_POOL );
		new StubNameServiceClient( d, client, qp, fp );

		return server;
	}

	/**
	 * Factory used by
	 * {@link NameServiceHelper#newServer(String, Resources, NameServiceClientFactory)}
	 * to construct a new instance implementing {@link NameServiceClient}. The new
	 * instance will receive and process messages from the server session.
	 */
	public interface NameServiceClientFactory
	{
		/**
		 * Constructs a new instance implementing NameServiceClient. The new
		 * instance will receive and process messages from the server session.
		 * 
		 * @param server an instance of RemoteNameServiceServer which may be used to
		 * send messages to the server session.
		 * @return a new instance implementing NameServiceClient (typically
		 * ImplNameServiceClient).
		 * @throws Exception
		 */
		public NameServiceClient newNameServiceClient( RemoteNameServiceServer server )
			throws Exception;
	}
}
