// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / java 1.1.0-incubating (LOCAL-0)
//   Sat Feb 21 22:11:51 CST 2009
// This file is automatically created and should not be edited!

package etch.services.ns;



/**
 * The NameService provides translation from an abstract name for a service to a
 * uri that may be used to contact the service. A given service may offer
 * several different connection schemes, and a client may only support a subset
 * of those. So, when a client wishes to connect to a service, it may query
 * the NameService with both abstract name and desired schemes in order to find
 * a suitable match.
 * 
 * Some example queries:
 * 
 * All services with servicename='Foo' and instancename='bar' and qualifier='tcp'
 * 
 *   sourceUri='Foo/bar/tcp'
 * 
 * Same as the query above, but written out longhand:
 * 
 *   servicename='Foo' and instancename='bar' and qualifier='tcp'
 * 
 * Fully qualified sourceUri:
 * 
 *   sourceUri='Foo/bar/tcp/1'
 * 
 * Any instance of service Foo located in Austin, TX:
 * 
 *   servicename='Foo' and qualities.location='Austin, TX'
 * 
 * Instances of service Foo with capacity >= 400:
 * 
 *   servicename='Foo' and qualities.capacity>=400
 * 
 * Relative operations on qualities require that the quality be present and be
 * comparable (with mixed types some type promotion is supported). But you might
 * be surprised, qualities which are absent will give a negative comparison no
 * matter which sense is used: both qualities.x > 50 and qualities.x < 50 are
 * false whenever qualities.x is null. Consider this test: not qualities.x < 50.
 * This is not the same as qualities.x >= 50. It is the same as qualities.x =
 * null or qualities.x >= 50.
 */
@SuppressWarnings("unused")
public interface NameServiceClient extends NameService
{
	/**
	 * Notifies the client of a change in an entry. The entry might have been
	 * created, updated, or removed.
	 * 
	 * Note: while this might have normally been an event, we made it a call
	 * to slow down the processing of what might otherwise be a rather large
	 * change set.
	 * 
	 * Note: when keeping track of entries, always keep the one with the latest
	 * lastUpdate.
	 * 
	 * @param query the query which triggered the notification.
	 * 
	 * @param entry the entry which has changed.
	 */
	public void entryChanged(
		String query
		, etch.services.ns.NameService.Entry entry
	)
	;
}
