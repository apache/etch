// This file automatically generated by:
//   Etch Version 0.95/java backend 0.95
//   Wed Aug 15 18:39:49 CDT 2007

package etch.examples.ccmuser;

import etch.bindings.java.msg.Message;
import etch.bindings.java.support.MessageSource;
import etch.bindings.java.support.Pool;
import etch.bindings.java.support._Etch_AuthException;
import metreos.core.Who;
import etch.bindings.java.support.Pool.PoolRunnable;

/**
 * Message to call translator for CcmUserClient.
 */
public class StubCcmUserClient extends StubCcmUser
{
	/**
	 * Stub for CcmUserClient.
	 * @param obj the implementation of CcmUserClient responsive to requests.
	 * @param pool thread pool used to run AsyncReceiverMode.FREE methods.
	 * @param free thread pool used to run AsyncReceiverMode.FREE methods.
	 */
	public StubCcmUserClient( CcmUserClient obj, Pool pool, Pool free )
	{
		super( obj, pool, free );
		this._obj = obj;
	}
	
	@SuppressWarnings("unused")
	private final CcmUserClient _obj;

	@Override
	public boolean message( final MessageSource _src, final Who _sender, final Message _msg )
		throws Exception
	{
		if (_msg == null)
		{
			super.message( _src, _sender, _msg );
			return true;
		}

		switch (_msg.type().getId())
		{
			case -557621791: // ValueFactoryCcmUser._mt_etch_examples_ccmuser_CcmUserClient_DoINeedThis
				do_DoINeedThis( _src, _sender, _msg );
				return true;
			default:
				return super.message( _src, _sender, _msg );
		}
	}

	/**
	 * @param _src
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_DoINeedThis( final MessageSource _src, final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			_obj.DoINeedThis(
			);

			Message _rmsg = _msg.reply( ValueFactoryCcmUser._mt_etch_examples_ccmuser_CcmUserServer__result_DoINeedThis );
			_src.message( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryCcmUser._mt_etch_examples_ccmuser_CcmUserServer__result_DoINeedThis );
			_rmsg.put( ValueFactoryCcmUser._mf_result, e );
			_src.message( _sender, _rmsg );
		}
	}
}
