/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package etch.examples.benchmark.thrift;

import java.util.ArrayList;
import java.util.HashMap;

import com.facebook.thrift.TApplicationException;
import com.facebook.thrift.TException;
import com.facebook.thrift.TProcessor;
import com.facebook.thrift.protocol.TField;
import com.facebook.thrift.protocol.TList;
import com.facebook.thrift.protocol.TMessage;
import com.facebook.thrift.protocol.TMessageType;
import com.facebook.thrift.protocol.TProtocol;
import com.facebook.thrift.protocol.TProtocolUtil;
import com.facebook.thrift.protocol.TStruct;
import com.facebook.thrift.protocol.TType;

public class Perf {

  public interface Iface {
    public int add(int x, int y) throws TException;
    public int sum(ArrayList<Integer> values) throws TException;
    public void report(int code, String msg) throws TException;
  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public int add(int x, int y) throws TException
    {
      send_add(x, y);
      return recv_add();
    }

    public void send_add(int x, int y) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("add", TMessageType.CALL, seqid_));
      add_args args = new add_args();
      args.x = x;
      args.y = y;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_add() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      add_result result = new add_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "add failed: unknown result");
    }

    public int sum(ArrayList<Integer> values) throws TException
    {
      send_sum(values);
      return recv_sum();
    }

    public void send_sum(ArrayList<Integer> values) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sum", TMessageType.CALL, seqid_));
      sum_args args = new sum_args();
      args.values = values;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_sum() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      sum_result result = new sum_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sum failed: unknown result");
    }

    public void report(int code, String msg) throws TException
    {
      send_report(code, msg);
    }

    public void send_report(int code, String msg) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("report", TMessageType.CALL, seqid_));
      report_args args = new report_args();
      args.code = code;
      args.msg = msg;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("add", new add());
      processMap_.put("sum", new sum());
      processMap_.put("report", new report());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class add implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        add_args args = new add_args();
        args.read(iprot);
        iprot.readMessageEnd();
        add_result result = new add_result();
        result.success = iface_.add(args.x, args.y);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("add", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sum implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sum_args args = new sum_args();
        args.read(iprot);
        iprot.readMessageEnd();
        sum_result result = new sum_result();
        result.success = iface_.sum(args.values);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("sum", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class report implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        report_args args = new report_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.report(args.code, args.msg);
        return;
      }
    }

  }

  public static class add_args   {
    public int x;
    public int y;

    Isset __isset = new Isset();
    public final class Isset {
      public boolean x = false;
      public boolean y = false;
    }

    public add_args() {
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      TStruct struct = iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.I32) {
              this.x = iprot.readI32();
              this.__isset.x = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.I32) {
              this.y = iprot.readI32();
              this.__isset.y = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("add_args");
      TField field = new TField();
      oprot.writeStructBegin(struct);
      field.name = "x";
      field.type = TType.I32;
      field.id = -1;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.x);
      oprot.writeFieldEnd();
      field.name = "y";
      field.type = TType.I32;
      field.id = -2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.y);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("add_args(");
      sb.append("x:");
      sb.append(this.x);
      sb.append(",y:");
      sb.append(this.y);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class add_result   {
    public int success;

    Isset __isset = new Isset();
    public final class Isset {
      public boolean success = false;
    }

    public add_result() {
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      TStruct struct = iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("add_result");
      TField field = new TField();
      oprot.writeStructBegin(struct);

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I32;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("add_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class sum_args   {
    public ArrayList<Integer> values;

    Isset __isset = new Isset();
    public final class Isset {
      public boolean values = false;
    }

    public sum_args() {
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      TStruct struct = iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.LIST) {
              {
                this.values = new ArrayList<Integer>(); // from me
                TList _list0 = iprot.readListBegin();
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2 = 0;
                  _elem2 = iprot.readI32();
                  this.values.add(_elem2);
                }
                iprot.readListEnd();
              }
              this.__isset.values = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("sum_args");
      TField field = new TField();
      oprot.writeStructBegin(struct);
      if (this.values != null) {
        field.name = "values";
        field.type = TType.LIST;
        field.id = -1;
        oprot.writeFieldBegin(field);
        {
          oprot.writeListBegin(new TList(TType.I32, this.values.size()));
          for (int _iter3 : this.values)          {
            oprot.writeI32(_iter3);
            oprot.writeListEnd();
          }
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sum_args(");
      sb.append("values:");
      sb.append(this.values);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class sum_result   {
    public int success;

    Isset __isset = new Isset();
    public final class Isset {
      public boolean success = false;
    }

    public sum_result() {
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      TStruct struct = iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("sum_result");
      TField field = new TField();
      oprot.writeStructBegin(struct);

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I32;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sum_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class report_args   {
    public int code;
    public String msg;

    Isset __isset = new Isset();
    public final class Isset {
      public boolean code = false;
      public boolean msg = false;
    }

    public report_args() {
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      TStruct struct = iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.I32) {
              this.code = iprot.readI32();
              this.__isset.code = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.msg = iprot.readString();
              this.__isset.msg = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("report_args");
      TField field = new TField();
      oprot.writeStructBegin(struct);
      field.name = "code";
      field.type = TType.I32;
      field.id = -1;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.code);
      oprot.writeFieldEnd();
      if (this.msg != null) {
        field.name = "msg";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("report_args(");
      sb.append("code:");
      sb.append(this.code);
      sb.append(",msg:");
      sb.append(this.msg);
      sb.append(")");
      return sb.toString();
    }

  }

}
