// This file automatically generated by:
//   @EtchVersion@ (@EtchBuildTag@) / csharp @EtchVersion@ (@EtchBuildTag@)
//   Fri Dec 21 22:30:24 GMT-06:00 2007

using System;
using System.Collections.Generic;
using System.Text;

using Etch.Msg;
using Etch.Support;
using Etch.Transport;
using System.Collections;
using Etch.Util;

/// <summary>
/// Transport helper for DistributedHashTable.
/// </summary>
namespace etch.examples.distmap
{
    public class DistributedHashTableHelper : TransportHelper
    {

        private DistributedHashTableHelper()
        {
            // nothing
        }

		///
		/// <summary>Constructs a new server session listener per specifications
		/// in uri and resources.</summary>
		///
		/// <param name="uri"> contains specifications for the server session
		/// listener and for the server session transport stack.</param>
		///
		/// <param name="resources"> additional resources to aid in constructing
		/// new server sessions.</param>
		///
		/// <param name="implFactory"> called upon accepting a new server session to
		/// construct a new server implementation to handle messages
		/// from the client during the session.</param>
		///
		/// <returns> an out-of-band source that may be used to control
		/// the listener.</returns>
		///

		public static Transport NewDistributedHashTableListener( URL uri,		
			Resources resources, DistributedHashTableServerFactory implFactory )
		{
			Resources res = InitResources( resources );

			TransportFactory factory = TransportFactory.Get( uri.Scheme );
			
			return factory.NewListener( uri, res, new MyServerFactory( uri, res, implFactory ) );
		}
		
		///
		/// <summary>Constructs a new client session per specifications in uri
		/// and resources.</summary>
		///
		/// <param name="uri"> contains specifications for the client session
		/// transport stack.</param>
		///
		/// <param name="resources"> additional resources to aid in constructing
		/// new sessions.</param>
		///
		/// <param name="client"> an client implementation to handle any
		/// messages from the server during the session.</param>
		///
		/// <returns> new remote server instance initialized by uri
		/// and resources which may be used to send messages to the
		/// server session.</returns>
		///
		
		public static RemoteDistributedHashTableServer NewDistributedHashTableServer( URL uri,
			Resources resources, DistributedHashTableClient client )
		{
			resources = InitResources( resources );
			resources = new Resources( resources );
			resources.Add( Messagizer.VALUE_FACTORY, new ValueFactoryDistributedHashTable() );
	
			TransportFactory factory = TransportFactory.Get( uri.Scheme );
	
			DefaultDeliveryService d = factory.NewTransport( uri, resources );
	
			if (client != null)
				d.AddStub( new StubDistributedHashTableClient( null,
					client,
					(Pool) resources[ QUEUED_POOL ],
					(Pool) resources[ FREE_POOL ] ) );
	
			return new RemoteDistributedHashTableServer( d );
		}
		
		/// <summary>
		/// Factory for a Listener to use to create new instances of DistributedHashTableServer.
		/// </summary>
		///
		public interface DistributedHashTableServerFactory
		{
			///
			/// <param name="client"> an DistributedHashTableClient instance for server implementation
			/// to use to call back to the client.</param>
			/// <returns> an instance of DistributedHashTableServer (e.g., ImplDistributedHashTableServer) to
			/// handle messages which arrive from the client.</returns>
			///
			DistributedHashTableServer NewDistributedHashTableServer( DistributedHashTableClient client );
		}
		
		public class MyServerFactory : ServerFactory
		{
		
			private URL _uri;
			private Resources _resources;
			private DistributedHashTableServerFactory _implFactory;
			
			public MyServerFactory( URL uri, Resources resources, DistributedHashTableServerFactory implFactory ) 
			{
				_uri = uri;
				_resources = resources;
				_implFactory = implFactory;
			}
		
			public void NewServer( DefaultDeliveryService d )
			{
				DistributedHashTableClient client = new RemoteDistributedHashTableClient( d );
				DistributedHashTableServer server = _implFactory.NewDistributedHashTableServer( client );
				Pool qp = (Pool) _resources[ QUEUED_POOL ];
				Pool fp = (Pool) _resources[ FREE_POOL ];
				d.AddStub( new StubDistributedHashTableServer( d.GetSource(), server, qp, fp ) );
			}
			
			public ValueFactory NewValueFactory()
			{
				return new ValueFactoryDistributedHashTable();
			}
		}

	}
}
