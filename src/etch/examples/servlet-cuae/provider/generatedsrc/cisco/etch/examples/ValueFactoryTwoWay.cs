// This file automatically generated by: 
// Etch Version 0.95/csharp backend 0.95. 
// Thu Aug 16 12:08:25 CDT 2007.

namespace cisco.etch.examples
{
using System;
using System.Collections.Generic;
using Etch.Msg;
using Etch.Support;

///
///<summary> ValueFactory for TwoWay. </summary>
///
public class ValueFactoryTwoWay : DefaultValueFactory
{
	/// Type for cisco.etch.examples.TwoWay.Selection 
	public static XType _mt_cisco_etch_examples_TwoWay_Selection = new XType( -1501536282, "cisco.etch.examples.TwoWay.Selection" );
	// { addType( _mt_cisco_etch_examples_TwoWay_Selection ); }

	/// Type for cisco.etch.examples.TwoWayServer.sendCUAEMessage 
	public static XType _mt_cisco_etch_examples_TwoWayServer_sendCUAEMessage = new XType( 1167849926, "cisco.etch.examples.TwoWayServer.sendCUAEMessage" );
	// { addType( _mt_cisco_etch_examples_TwoWayServer_sendCUAEMessage ); }

	/// Type for cisco.etch.examples.TwoWayServer._result_sendCUAEMessage 
	public static XType _mt_cisco_etch_examples_TwoWayServer__result_sendCUAEMessage = new XType( 1140950467, "cisco.etch.examples.TwoWayServer._result_sendCUAEMessage" );
	// { addType( _mt_cisco_etch_examples_TwoWayServer__result_sendCUAEMessage ); }

	/// Type for cisco.etch.examples.TwoWayClient.sendServletMessage 
	public static XType _mt_cisco_etch_examples_TwoWayClient_sendServletMessage = new XType( 1520112965, "cisco.etch.examples.TwoWayClient.sendServletMessage" );
	// { addType( _mt_cisco_etch_examples_TwoWayClient_sendServletMessage ); }

	/// Type for cisco.etch.examples.TwoWayServer._result_sendServletMessage 
	public static XType _mt_cisco_etch_examples_TwoWayServer__result_sendServletMessage = new XType( -1284384240, "cisco.etch.examples.TwoWayServer._result_sendServletMessage" );
	// { addType( _mt_cisco_etch_examples_TwoWayServer__result_sendServletMessage ); }

	/// Type for cisco.etch.examples.TwoWayClient.bogus 
	public static XType _mt_cisco_etch_examples_TwoWayClient_bogus = new XType( -1120184867, "cisco.etch.examples.TwoWayClient.bogus" );
	// { addType( _mt_cisco_etch_examples_TwoWayClient_bogus ); }

	
	public new XType GetType( int id )
	{
		switch (id)
		{
			case -1501536282: return _mt_cisco_etch_examples_TwoWay_Selection;
			case 1167849926: return _mt_cisco_etch_examples_TwoWayServer_sendCUAEMessage;
			case 1140950467: return _mt_cisco_etch_examples_TwoWayServer__result_sendCUAEMessage;
			case 1520112965: return _mt_cisco_etch_examples_TwoWayClient_sendServletMessage;
			case -1284384240: return _mt_cisco_etch_examples_TwoWayServer__result_sendServletMessage;
			case -1120184867: return _mt_cisco_etch_examples_TwoWayClient_bogus;
			default: return base.GetType( id );
		}
	}

	public override StructValue ExportCustomValue( Object value )
	{
		Type clss = value.GetType();

		if (clss == typeof( cisco.etch.examples.ConstsTwoWay.Selection ) )
		{
			StructValue sv = new StructValue( _mt_cisco_etch_examples_TwoWay_Selection );
			cisco.etch.examples.ConstsTwoWay.Selection v = (cisco.etch.examples.ConstsTwoWay.Selection) value;
			switch (v)
			{
				case cisco.etch.examples.ConstsTwoWay.Selection.Water: sv.Add( _mf_Water, true ); break;
				case cisco.etch.examples.ConstsTwoWay.Selection.Coke: sv.Add( _mf_Coke, true ); break;
				case cisco.etch.examples.ConstsTwoWay.Selection.HotDog: sv.Add( _mf_HotDog, true ); break;
			}
			return sv;
		}

		return base.ExportCustomValue( value );
	}

	
	public override Object ImportCustomValue( StructValue sv )
	{
		XType type = sv.GetXType;
		switch( type.Id )
		{
			case -1501536282 /* enum _mt_cisco_etch_examples_TwoWay_Selection */:
			{
				// assume there is a single key
				Field key = null;
	
				IEnumerator<Field> myEnum = sv.Keys.GetEnumerator();
				if (myEnum.MoveNext())
					key = myEnum.Current;
	
				switch (key.Id)
				{
					case 46502578: return cisco.etch.examples.ConstsTwoWay.Selection.Water;
					case 465921451: return cisco.etch.examples.ConstsTwoWay.Selection.Coke;
					case -1688102604: return cisco.etch.examples.ConstsTwoWay.Selection.HotDog;
				}
				return null;
			}

		}
		return base.ImportCustomValue( sv );
	}

	
	public override XType GetCustomStructType( Type c )
	{
		//if (c == Date.class) return _mt__Etch_Date;
		if (c == typeof(cisco.etch.examples.ConstsTwoWay.Selection)) return _mt_cisco_etch_examples_TwoWay_Selection;
		return null;
	}

	
	public override Type GetCustomType( XType type )
	{
		switch (type.Id)
		{
//			case -1201742561 /* _mt__Etch_Date */: return typeof(DateTime);
			case -1501536282 /* _mt_cisco_etch_examples_TwoWay_Selection */: return typeof(cisco.etch.examples.ConstsTwoWay.Selection);
		}
		
		return null;
	}
	
	/// Field for Water 
	public static Field _mf_Water = new Field( 46502578, "Water" );
	//{ addField( _mf_Water ); }
	
	/// Field for Coke 
	public static Field _mf_Coke = new Field( 465921451, "Coke" );
	//{ addField( _mf_Coke ); }
	
	/// Field for HotDog 
	public static Field _mf_HotDog = new Field( -1688102604, "HotDog" );
	//{ addField( _mf_HotDog ); }
	
	/// Field for msg 
	public static Field _mf_msg = new Field( 769750364, "msg" );
	//{ addField( _mf_msg ); }
	
	/// Field for result 
	public static Field _mf_result = new Field( -2130379326, "result" );
	//{ addField( _mf_result ); }
	
	/// Field for selection 
	public static Field _mf_selection = new Field( 1718499559, "selection" );
	//{ addField( _mf_selection ); }
	

	public new Field GetField( int id )
	{
		switch (id)
		{
			case 46502578: return _mf_Water;
			case 465921451: return _mf_Coke;
			case -1688102604: return _mf_HotDog;
			case 769750364: return _mf_msg;
			case -2130379326: return _mf_result;
			case 1718499559: return _mf_selection;
			default: return base.GetField( id );
		}
	}

	/// <summary></summary>
	/// <param name="c">the class to convert obj to (e.g. cisco.etch.examples.ConstsTwoWay.Selection[].class)</param>
	/// <param name="obj"> the generic array of cisco.etch.examples.ConstsTwoWay.Selection</param>
	/// <returns> the generic array of cisco.etch.examples.ConstsTwoWay.Selection converted to a native array of cisco.etch.examples.ConstsTwoWay.Selection</returns>
	///
	//public static Object to_Selection( Type c, Object obj )
	//{
	//	return ArrayValue2Native( obj, c  );
	//}
	
}

}