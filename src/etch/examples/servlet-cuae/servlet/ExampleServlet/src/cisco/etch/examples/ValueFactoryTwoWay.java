// This file automatically generated by:
//   Etch Version 0.95/java backend 0.95
//   Thu Aug 16 11:48:00 CDT 2007

package cisco.etch.examples;

import etch.bindings.java.msg.Field;
import etch.bindings.java.msg.Type;
import etch.bindings.java.msg.StructValue;
import etch.bindings.java.support.DefaultValueFactory;

/**
 * ValueFactory for TwoWay.
 */
public class ValueFactoryTwoWay extends DefaultValueFactory
{
	/**
	 * Construct the ValueFactoryTwoWay.
	 */
	public ValueFactoryTwoWay()
	{
	}

	/** Type for cisco.etch.examples.TwoWay.Selection */
	public static final Type _mt_cisco_etch_examples_TwoWay_Selection = new Type( -1501536282, "cisco.etch.examples.TwoWay.Selection" );
	// { addType( _mt_cisco_etch_examples_TwoWay_Selection ); }

	/** Type for cisco.etch.examples.TwoWayServer.sendCUAEMessage */
	public static final Type _mt_cisco_etch_examples_TwoWayServer_sendCUAEMessage = new Type( 1167849926, "cisco.etch.examples.TwoWayServer.sendCUAEMessage" );
	// { addType( _mt_cisco_etch_examples_TwoWayServer_sendCUAEMessage ); }

	/** Type for cisco.etch.examples.TwoWayClient.sendServletMessage */
	public static final Type _mt_cisco_etch_examples_TwoWayClient_sendServletMessage = new Type( 1520112965, "cisco.etch.examples.TwoWayClient.sendServletMessage" );
	// { addType( _mt_cisco_etch_examples_TwoWayClient_sendServletMessage ); }

	/** Type for cisco.etch.examples.TwoWayServer._result_sendServletMessage */
	public static final Type _mt_cisco_etch_examples_TwoWayServer__result_sendServletMessage = new Type( -1284384240, "cisco.etch.examples.TwoWayServer._result_sendServletMessage" );
	// { addType( _mt_cisco_etch_examples_TwoWayServer__result_sendServletMessage ); }

	/** Type for cisco.etch.examples.TwoWayClient.bogus */
	public static final Type _mt_cisco_etch_examples_TwoWayClient_bogus = new Type( -1120184867, "cisco.etch.examples.TwoWayClient.bogus" );
	// { addType( _mt_cisco_etch_examples_TwoWayClient_bogus ); }

	@Override
	public Type getType( Integer id )
	{
		switch (id)
		{
			case -1501536282: return _mt_cisco_etch_examples_TwoWay_Selection;
			case 1167849926: return _mt_cisco_etch_examples_TwoWayServer_sendCUAEMessage;
			case 1520112965: return _mt_cisco_etch_examples_TwoWayClient_sendServletMessage;
			case -1284384240: return _mt_cisco_etch_examples_TwoWayServer__result_sendServletMessage;
			case -1120184867: return _mt_cisco_etch_examples_TwoWayClient_bogus;
			default: return super.getType( id );
		}
	}

	@Override
	public StructValue exportCustomValue( Object value )
	{
		Class<?> clss = value.getClass();

		if (clss == cisco.etch.examples.TwoWay.Selection.class)
		{
			StructValue struct = new StructValue( _mt_cisco_etch_examples_TwoWay_Selection );
			cisco.etch.examples.TwoWay.Selection v = (cisco.etch.examples.TwoWay.Selection) value;
			switch (v)
			{
				case Water: struct.put( _mf_Water, true ); break;
				case Coke: struct.put( _mf_Coke, true ); break;
				case HotDog: struct.put( _mf_HotDog, true ); break;
			}
			return struct;
		}

		return super.exportCustomValue( value );
	}

	@Override
	public Object importCustomValue( StructValue struct )
	{
		Type type = struct.type();
		switch( type.getId() )
		{
			case -1501536282 /* enum _mt_cisco_etch_examples_TwoWay_Selection */:
			{
				// assume there is a single key
				Field key = struct.keySet().iterator().next();
				switch (key.getId())
				{
					case 46502578: return cisco.etch.examples.TwoWay.Selection.Water;
					case 465921451: return cisco.etch.examples.TwoWay.Selection.Coke;
					case -1688102604: return cisco.etch.examples.TwoWay.Selection.HotDog;
				}
				return null;
			}

		}
		return super.importCustomValue( struct );
	}

	@Override
	public Type getCustomStructType( Class<?> c )
	{
		//if (c == Date.class) return _mt__Etch_Date;
		if (c == cisco.etch.examples.TwoWay.Selection.class) return _mt_cisco_etch_examples_TwoWay_Selection;
		return null;
	}

	@Override
	public Class<?> getCustomType( Type type )
	{
		switch (type.getId())
		{
//			case -1201742561 /* _mt__Etch_Date */: return Date.class;
			case -1501536282 /* _mt_cisco_etch_examples_TwoWay_Selection */: return cisco.etch.examples.TwoWay.Selection.class;
		}
		
		return null;
	}

	/** Field for Water */
	public static final Field _mf_Water = new Field( 46502578, "Water" );
	//{ addField( _mf_Water ); }
	
	/** Field for Coke */
	public static final Field _mf_Coke = new Field( 465921451, "Coke" );
	//{ addField( _mf_Coke ); }
	
	/** Field for HotDog */
	public static final Field _mf_HotDog = new Field( -1688102604, "HotDog" );
	//{ addField( _mf_HotDog ); }
	
	/** Field for msg */
	public static final Field _mf_msg = new Field( 769750364, "msg" );
	//{ addField( _mf_msg ); }
	
	/** Field for selection */
	public static final Field _mf_selection = new Field( 1718499559, "selection" );
	//{ addField( _mf_selection ); }
	
	/** Field for result */
	public static final Field _mf_result = new Field( -2130379326, "result" );
	//{ addField( _mf_result ); }
	
	@Override
	public Field getField( Integer id )
	{
		switch (id)
		{
			case 46502578: return _mf_Water;
			case 465921451: return _mf_Coke;
			case -1688102604: return _mf_HotDog;
			case 769750364: return _mf_msg;
			case 1718499559: return _mf_selection;
			case -2130379326: return _mf_result;
			default: return super.getField( id );
		}
	}
//
//	/**
//	 * @param n the number of dimensions of the array
//	 * @param obj the generic array of cisco.etch.examples.TwoWay.Selection
//	 * @return the generic array of cisco.etch.examples.TwoWay.Selection converted to a native array of cisco.etch.examples.TwoWay.Selection
//	 */
//	public final static Object to_Selection( Class<?> c, Object obj )
//	{
//		return arrayValue2Native( obj, c );
//	}
}
