// This file automatically generated by:
//   Etch Version 0.95/java backend 0.95
//   Thu Jul 26 20:46:35 CDT 2007

package etch.examples.mixin;

import etch.bindings.java.msg.Message;
import etch.bindings.java.support.MessageSource;
import etch.bindings.java.support.Pool;
import etch.bindings.java.support._Etch_AuthException;
import metreos.core.Who;
import etch.bindings.java.support.StubBase;
import etch.bindings.java.support.Pool.PoolRunnable;

/**
 * Message to call translator for Math.
 */
public class StubMath extends StubBase
{
	/**
	 * Stub for Math.
	 * @param obj the implementation of Math responsive to requests.
	 * @param pool thread pool used to run AsyncReceiverMode.FREE methods.
	 * @param free thread pool used to run AsyncReceiverMode.FREE methods.
	 */
	public StubMath( Math obj, Pool pool, Pool free )
	{
		super( obj, pool, free );
		this._obj = obj;
		this._stub_Auth = new StubAuth( obj, pool, free );
	}
	
	@SuppressWarnings("unused")
	private final Math _obj;
	
	@SuppressWarnings("unused")
	private final StubAuth _stub_Auth;

	@Override
	public boolean message( final MessageSource _src, final Who _sender, final Message _msg )
		throws Exception
	{
		if (_msg == null)
		{
			super.message( _src, _sender, _msg );
			_stub_Auth.message( _src, _sender, _msg );
			return true;
		}

		switch (_msg.getType().getId())
		{
			case -1764846376: // ValueFactoryMath._mt_etch_examples_mixin_Math_add
				do_add( _src, _sender, _msg );
				return true;
			case -1615024105: // ValueFactoryMath._mt_etch_examples_mixin_Math_sub
				do_sub( _src, _sender, _msg );
				return true;
			default:
				return super.message( _src, _sender, _msg )
				|| _stub_Auth.message( _src, _sender, _msg );
		}
	}

	/**
	 * @param _src
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_add( final MessageSource _src, final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryMath._mf_x )
				;
			Integer y =
				(Integer)
					_msg.get( ValueFactoryMath._mf_y )
				;

			Object _result =
			_obj.add(
				x
				, y
			);

			Message _rmsg = _msg.reply( ValueFactoryMath._mt_etch_examples_mixin_Math__result_add );
			_rmsg.put( ValueFactoryMath._mf_result, _result );
			_src.message( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryMath._mt_etch_examples_mixin_Math__result_add );
			_rmsg.put( ValueFactoryMath._mf_result, e );
			_src.message( _sender, _rmsg );
		}
	}

	/**
	 * @param _src
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_sub( final MessageSource _src, final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryMath._mf_x )
				;
			Integer y =
				(Integer)
					_msg.get( ValueFactoryMath._mf_y )
				;

			Object _result =
			_obj.sub(
				x
				, y
			);

			Message _rmsg = _msg.reply( ValueFactoryMath._mt_etch_examples_mixin_Math__result_sub );
			_rmsg.put( ValueFactoryMath._mf_result, _result );
			_src.message( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryMath._mt_etch_examples_mixin_Math__result_sub );
			_rmsg.put( ValueFactoryMath._mf_result, e );
			_src.message( _sender, _rmsg );
		}
	}
}
