// This file automatically generated by:
//   $version
//   $now

package $intf.parent().name();

import etch.bindings.java.msg.Field;
import etch.bindings.java.msg.Type;
import etch.bindings.java.msg.StructValue;
import etch.bindings.java.msg.Validator_RuntimeException;
import etch.bindings.java.msg.Validator_boolean;
import etch.bindings.java.msg.Validator_byte;
import etch.bindings.java.msg.Validator_custom;
import etch.bindings.java.msg.Validator_double;
import etch.bindings.java.msg.Validator_float;
import etch.bindings.java.msg.Validator_int;
import etch.bindings.java.msg.Validator_long;
import etch.bindings.java.msg.Validator_object;
import etch.bindings.java.msg.Validator_short;
import etch.bindings.java.msg.Validator_string;
import etch.bindings.java.msg.Validator_void;
import etch.bindings.java.support.DefaultValueFactory;
#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
#if ($n.hasImport( $helper ))
import $n.getImport( $helper );
#end
#if ($n.hasSerializerImport( $helper ))
import $n.getSerializerImport( $helper );
#end
#end
#end

/**
 * ValueFactory for $intf.name().
 */
@SuppressWarnings("unused")
public class ValueFactory$intf.name() extends DefaultValueFactory
{
	/**
	 * Construct the ValueFactory${intf.name()}.
	 */
	public ValueFactory$intf.name()()
	{
		// initialize the extern serializers:
#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
		${n.sname( $helper )}.init( this, $n.vname( $helper ) );
#end
#end
	}

#foreach ( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExtern() || $n.isExcept() || $n.isMessage())
	/** Type for $n.fqname() */
	public static final Type $n.vname( $helper ) = new Type( $n.id(), "$n.fqname()" );
	{ addType( $n.vname( $helper ) ); }

#end
#end
## ---------------------------------------------------------------------------
	@Override
	public Type getType( Integer id )
	{
		switch (id)
		{
#foreach( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExtern() || $n.isExcept() || $n.isMessage())
			case $n.id(): return $n.vname( $helper );
#end
#end
			default: return super.getType( id );
		}
	}

	@Override
	public StructValue exportCustomValue( Object value )
	{
		Class<?> clss = value.getClass();

#foreach ( $n in $intf.iterator() )
#if ($n.isStruct() || $n.isExcept())
#set( $tname = $n.efqname( $helper ) )
		if (clss == ${tname}.class)
		{
			StructValue struct = new StructValue( $n.vname( $helper ) );
			$tname v = ($tname) value;
#foreach( $param in $n.iterator() )
			struct.put( $param.vname( $helper ), v.$param.name() );
#end
			return struct;
		}

#elseif ($n.isExtern())
#set( $tname = $n.efqname( $helper ) )
		if (clss == ${tname}.class)
		{
			StructValue struct = new StructValue( $n.vname( $helper ) );
			// serialize $tname to struct using $n.sname( $helper )
			${n.sname( $helper )}.exportValue( this, ($tname) value, struct );
			return struct;
		}

#elseif ($n.isEnumx())
#set( $tname = $n.efqname( $helper ) )
		if (clss == ${tname}.class)
		{
			StructValue struct = new StructValue( $n.vname( $helper ) );
			$tname v = ($tname) value;
			switch (v)
			{
#foreach ($p in $n.iterator())
				case $p.name(): struct.put( $p.vname( $helper ), true ); break;
#end
			}
			return struct;
		}

#end
#end
		return super.exportCustomValue( value );
	}

	@Override
	public Object importCustomValue( StructValue struct )
	{
		Type type = struct.type();
		switch( type.getId() )
		{
#foreach ( $n in $intf.iterator() )
#if ($n.isStruct() || $n.isExcept())
#set( $tname = $n.efqname( $helper ) )
			case $n.id() /* struct/except $n.vname( $helper ) */:
			{
				return new $tname(
#set( $sep = "" )
#foreach ($p in $n.iterator())
					${sep}($helper.getTypeName( $p.type() ))
#if ($p.type().dim() > 0)
//					to_$p.type().type()(
//						${helper.getTypeName( $p.type() )}.class,
#end
						struct.get( $p.vname( $helper ) )
#if ($p.type().dim() > 0)
//					)
#end
#set( $sep = ", " )
#end
				);
			}

#elseif ($n.isExtern())
#set( $tname = $n.efqname( $helper ) )
			case $n.id() /* extern $n.vname( $helper ) */:
			{
				// deserialize $tname from struct using $n.sname( $helper )
				return ${n.sname( $helper )}.importValue( this, struct );
			}

#elseif ($n.isEnumx())
#set( $tname = $n.efqname( $helper ) )
			case $n.id() /* enum $n.vname( $helper ) */:
			{
				// assume there is a single key
				Field key = struct.keySet().iterator().next();
				switch (key.getId())
				{
#foreach ($p in $n.iterator())
					case $p.id(): return ${tname}.$p.name();
#end
				}
				return null;
			}

#end
#end
			default:
				return super.importCustomValue( struct );
		}
	}

	@Override
	public Type getCustomStructType( Class<?> c )
	{
		//if (c == Date.class) return _mt__Etch_Date;
#foreach ( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExtern() || $n.isExcept())
#set( $tname = $n.efqname( $helper ) )
		if (c == ${tname}.class) return $n.vname( $helper );
#end
#end
		return null;
	}

	@Override
	public Class<?> getCustomType( Type type )
	{
		switch (type.getId())
		{
//			case -1201742561 /* _mt__Etch_Date */: return Date.class;
#foreach ( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExtern() || $n.isExcept())
#set( $tname = $n.efqname( $helper ) )
			case $n.id() /* $n.vname( $helper ) */: return ${tname}.class;
#end
#end
		}
		
		return null;
	}
#set( $x = $params.clear() )
#foreach( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExcept() || $n.isMessage())
#foreach( $param in $n.iterator() )
#if (!$params.contains($param.name().name()))
#set( $x = $params.add($param.name().name()) )

	/** Field for $param.name().name() */
	public static final Field $param.vname( $helper ) = new Field( $param.id(), "$param.name().name()" );
	{ addField( $param.vname( $helper ) ); }
#end
#end
#end
#end

	@Override
	public Field getField( Integer id )
	{
		switch (id)
		{
#set( $x = $params.clear() )
#foreach( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExcept() || $n.isMessage())
#foreach( $param in $n.iterator() )
#if (!$params.contains($param.name().name()))
#set( $x = $params.add($param.name().name()) )
			case $param.id(): return $param.vname( $helper );
#end
#end
#end
#end
			default: return super.getField( id );
		}
	}
#foreach( $n in $intf.iterator() )
#if ($n.isEnumx() || $n.isStruct() || $n.isExcept() || $n.isMessage())

	{
		// params for $n.name()
#foreach( $param in $n.iterator() )
		${n.vname( $helper )}.putValidator( $param.vname( $helper ), $helper.getValidator( $param ) );
#end
#if ($n.isMessage())
		${n.vname( $helper )}.putValidator( _mf__messageId, Validator_long.get( 0 ) );
#if ($n.isHidden())
#set( $param = $n.getResultParam() )
#set( $reqMsg = $n.getRequestMessage() )
#foreach( $t in $reqMsg.thrown().iterator() )
		${n.vname( $helper )}.putValidator( $param.vname( $helper ), $helper.getValidator( $t ) ); // thrown $t.name()
#end
		${n.vname( $helper )}.putValidator( $param.vname( $helper ), Validator_RuntimeException.get() ); // thrown RuntimeException
		${n.vname( $helper )}.putValidator( _mf__inReplyTo, Validator_long.get( 0 ) );
#end
#end
	}
#end
#end
}
