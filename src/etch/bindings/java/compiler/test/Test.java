// This file automatically generated by:
//   @EtchVersion@ (@EtchBuildTag@) / java @EtchVersion@ (@EtchBuildTag@)
//   Mon Nov 12 14:29:21 CST 2007

package etch.bindings.java.compiler.test;

import etch.bindings.java.util.StrIntHashMap;

/**
 */
@SuppressWarnings("unused")
public interface Test
{
	/**
	 */
	public boolean BOOL1 = false;

	/**
	 */
	public boolean BOOL2 = true;

	/**
	 */
	public byte BYTE1 = -128;

	/**
	 */
	public byte BYTE2 = -1;

	/**
	 */
	public byte BYTE3 = 0;

	/**
	 */
	public byte BYTE4 = 1;

	/**
	 */
	public byte BYTE5 = 127;

	/**
	 */
	public short SHORT1 = -32768;

	/**
	 */
	public short SHORT2 = -1;

	/**
	 */
	public short SHORT3 = 0;

	/**
	 */
	public short SHORT4 = 1;

	/**
	 */
	public short SHORT5 = 32767;

	/**
	 */
	public int INT1 = -2147483648;

	/**
	 */
	public int INT2 = -1;

	/**
	 */
	public int INT3 = 0;

	/**
	 */
	public int INT4 = 1;

	/**
	 */
	public int INT5 = 2147483647;

	/**
	 */
	public long LONG1 = -9223372036854775808l;

	/**
	 */
	public long LONG2 = -1l;

	/**
	 */
	public long LONG3 = 0l;

	/**
	 */
	public long LONG4 = 1l;

	/**
	 */
	public long LONG5 = 9223372036854775807l;

	/**
	 */
	public float FLOAT1 = 1.4e-45f;

	/**
	 */
	public float FLOAT2 = -1f;

	/**
	 */
	public float FLOAT3 = 0f;

	/**
	 */
	public float FLOAT4 = 1f;

	/**
	 */
	public float FLOAT5 = 3.4028235e38f;

	/**
	 */
	public double DOUBLE1 = 4.9e-324d;

	/**
	 */
	public double DOUBLE2 = -1d;

	/**
	 */
	public double DOUBLE3 = 0d;

	/**
	 */
	public double DOUBLE4 = 1d;

	/**
	 */
	public double DOUBLE5 = 1.7976931348623157e308d;

	/**
	 */
	public String STRING1 = "";

	/**
	 */
	public String STRING2 = "a";

	/**
	 */
	public String STRING3 = "abc";

	/**
	 */
	public String STRING4 = "a\tb\tc\r\n";

	/**
	 */
	public String STRING5 = "x x";

	/**
	 */
	public String STRING6 = "x\u00bfx";

	/**
	 */
	public String STRING7 = "x\u03a9x";

	/**
	 */
	public String STRING8 = "x\\x";

	/**
	 */
	public String STRING9 = "x'x";

	/**
	 */
	public String STRING10 = "x\"x";

	/**
	 */
	public enum E1
	{
		/**
		 */
		A
		/**
		 */
		, B
		/**
		 */
		, C
	}

	/**
	 */
	public class S1
	{
		/**
		 * Constructs the S1. Don't init anything.
		 */
		public S1()
		{
			// don't init anything.
		}
		
		/**
		 * Constructs the S1.
		 */
		public S1
		(
			Integer x
			, Integer y
			, Integer z
		)
		{
			this.x = x;
			this.y = y;
			this.z = z;
		}

		@Override
		public String toString()
		{
			return String.format( "S1(x=%s; y=%s; z=%s)", x, y, z );
		}

		/**
		 */
		public Integer x;
		/**
		 */
		public Integer y;
		/**
		 */
		public Integer z;
	}

	/**
	 */
	public class S2
	{
		/**
		 * Constructs the S2. Don't init anything.
		 */
		public S2()
		{
			// don't init anything.
		}
		
		/**
		 * Constructs the S2.
		 */
		public S2
		(
			etch.bindings.java.compiler.test.Test.S1 a
			, etch.bindings.java.compiler.test.Test.S1 b
			, etch.bindings.java.compiler.test.Test.E1 c
		)
		{
			this.a = a;
			this.b = b;
			this.c = c;
		}

		@Override
		public String toString()
		{
			return String.format( "S2(a=%s; b=%s; c=%s)", a, b, c );
		}

		/**
		 */
		public etch.bindings.java.compiler.test.Test.S1 a;
		/**
		 */
		public etch.bindings.java.compiler.test.Test.S1 b;
		/**
		 */
		public etch.bindings.java.compiler.test.Test.E1 c;
	}

	/**
	 * struct with object as param
	 */
	public class S3
	{
		/**
		 * Constructs the S3. Don't init anything.
		 */
		public S3()
		{
			// don't init anything.
		}
		
		/**
		 * Constructs the S3.
		 */
		public S3
		(
			String type
			, Object x
		)
		{
			this.type = type;
			this.x = x;
		}

		@Override
		public String toString()
		{
			return String.format( "S3(type=%s; x=%s)", type, x );
		}

		/**
		 */
		public String type;
		/**
		 */
		public Object x;
	}

	/**
	 * struct with array of object as param
	 */
	public class S4
	{
		/**
		 * Constructs the S4. Don't init anything.
		 */
		public S4()
		{
			// don't init anything.
		}
		
		/**
		 * Constructs the S4.
		 */
		public S4
		(
			String type
			, Object[] x
		)
		{
			this.type = type;
			this.x = x;
		}

		@Override
		public String toString()
		{
			return String.format( "S4(type=%s; x=%s)", type, x );
		}

		/**
		 */
		public String type;
		/**
		 */
		public Object[] x;
	}

	/**
	 */
	public class Excp1
			extends Exception
		{
		private static final long serialVersionUID = 1L;
		
		/**
		 * Constructs the Excp1. Don't init anything.
		 */
		public Excp1()
		{
			// don't init anything.
		}
		
		/**
		 * Constructs the Excp1.
		 */
		public Excp1
		(
			String msg
			, Integer code
		)
		{
			this.msg = msg;
			this.code = code;
		}

		@Override
		public String getMessage()
		{
			return String.format( "msg=%s; code=%s", msg, code );
		}

		/**
		 */
		public String msg;
		/**
		 */
		public Integer code;
	}

	/**
	 */
	public class Excp2
			extends RuntimeException
		{
		private static final long serialVersionUID = 1L;
		
		/**
		 * Constructs the Excp2. Don't init anything.
		 */
		public Excp2()
		{
			// don't init anything.
		}
		
		@Override
		public String getMessage()
		{
			return String.format( "" );
		}

	}

	/**
	 */
	public class Excp3
			extends RuntimeException
		{
		private static final long serialVersionUID = 1L;
		
		/**
		 * Constructs the Excp3. Don't init anything.
		 */
		public Excp3()
		{
			// don't init anything.
		}
		
		@Override
		public String getMessage()
		{
			return String.format( "" );
		}

	}

	/**
	 */
	public class Excp4
			extends Exception
		{
		private static final long serialVersionUID = 1L;
		
		/**
		 * Constructs the Excp4. Don't init anything.
		 */
		public Excp4()
		{
			// don't init anything.
		}
		
		@Override
		public String getMessage()
		{
			return String.format( "" );
		}

	}

	/**
	 * Exception with object as param
	 */
	public class Excp5
			extends Exception
		{
		private static final long serialVersionUID = 1L;
		
		/**
		 * Constructs the Excp5. Don't init anything.
		 */
		public Excp5()
		{
			// don't init anything.
		}
		
		/**
		 * Constructs the Excp5.
		 */
		public Excp5
		(
			String msg
			, Integer code
			, Object x
		)
		{
			this.msg = msg;
			this.code = code;
			this.x = x;
		}

		@Override
		public String getMessage()
		{
			return String.format( "msg=%s; code=%s; x=%s", msg, code, x );
		}

		/**
		 */
		public String msg;
		/**
		 */
		public Integer code;
		/**
		 */
		public Object x;
	}

	/**
	 * Exception with array of object as param
	 */
	public class Excp6
			extends Exception
		{
		private static final long serialVersionUID = 1L;
		
		/**
		 * Constructs the Excp6. Don't init anything.
		 */
		public Excp6()
		{
			// don't init anything.
		}
		
		/**
		 * Constructs the Excp6.
		 */
		public Excp6
		(
			String msg
			, Integer code
			, Object[] x
		)
		{
			this.msg = msg;
			this.code = code;
			this.x = x;
		}

		@Override
		public String getMessage()
		{
			return String.format( "msg=%s; code=%s; x=%s", msg, code, x );
		}

		/**
		 */
		public String msg;
		/**
		 */
		public Integer code;
		/**
		 */
		public Object[] x;
	}

	/**
	 */
	public void nothing(
	)
	;
	/**
	 */
	public Integer incr(
		Integer x
	)
	;
	/**
	 */
	public Integer add(
		Integer x
		, Integer y
	)
	;
	/**
	 */
	public Integer sub(
		Integer x
		, Integer y
	)
	;
	/**
	 */
	public Integer sum(
		int[] x
	)
	;
	/**
	 */
	public Integer trans(
		etch.bindings.java.compiler.test.Test.E1 e
		, Integer x
	)
	;
	/**
	 */
	public Double dist(
		etch.bindings.java.compiler.test.Test.S1 a
		, etch.bindings.java.compiler.test.Test.S1 b
	)
	;
	/**
	 */
	public int[] fill(
		Integer n
		, Integer x
	)
	;
	/**
	 * Return an array of object filled with value o
	 */
	public Object[] fillObject(
		Integer n
		, Object o
	)
	;
	/**
	 */
	public void blow(
		String msg
		, Integer code
	)
	throws
		Excp1
	;
	/**
	 */
	public Integer beets(
		etch.bindings.java.compiler.test.Test.E1 e
	)
	throws
		Excp3
		, Excp4
	;
	/**
	 */
	public void throwExcp5(
		String msg
		, Integer code
		, Object value
	)
	throws
		Excp5
	;
	/**
	 */
	public void throwExcp6(
		String msg
		, Integer code
		, Object[] value
	)
	throws
		Excp6
	;
	/**
	 */
	public Boolean p_boolean(
		Boolean a
	)
	;
	/**
	 */
	public boolean[] p_boolean_array(
		boolean[] a
	)
	;
	/**
	 */
	public Byte p_byte(
		Byte a
	)
	;
	/**
	 */
	public byte[] p_byte_array(
		byte[] a
	)
	;
	/**
	 */
	public Short p_short(
		Short a
	)
	;
	/**
	 */
	public short[] p_short_array(
		short[] a
	)
	;
	/**
	 */
	public Integer p_int(
		Integer a
	)
	;
	/**
	 */
	public int[] p_int_array(
		int[] a
	)
	;
	/**
	 */
	public Long p_long(
		Long a
	)
	;
	/**
	 */
	public long[] p_long_array(
		long[] a
	)
	;
	/**
	 */
	public Float p_float(
		Float a
	)
	;
	/**
	 */
	public float[] p_float_array(
		float[] a
	)
	;
	/**
	 */
	public Double p_double(
		Double a
	)
	;
	/**
	 */
	public double[] p_double_array(
		double[] a
	)
	;
	/**
	 */
	public String p_string(
		String a
	)
	;
	/**
	 */
	public String[] p_string_array(
		String[] a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.E1 p_E1(
		etch.bindings.java.compiler.test.Test.E1 a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.E1[] p_E1_array(
		etch.bindings.java.compiler.test.Test.E1[] a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.S1 p_S1(
		etch.bindings.java.compiler.test.Test.S1 a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.S1[] p_S1_array(
		etch.bindings.java.compiler.test.Test.S1[] a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.S2 p_S2(
		etch.bindings.java.compiler.test.Test.S2 a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.S2[] p_S2_array(
		etch.bindings.java.compiler.test.Test.S2[] a
	)
	;
	/**
	 */
	public StrIntHashMap p_Blob(
		StrIntHashMap a
	)
	;
	/**
	 */
	public StrIntHashMap[] p_Blob_array(
		StrIntHashMap[] a
	)
	;
	/**
	 */
	public Object p_object(
		Object a
	)
	;
	/**
	 */
	public Object[] p_object_array(
		Object[] a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.S3 p_object_struct(
		etch.bindings.java.compiler.test.Test.S3 a
	)
	;
	/**
	 */
	public etch.bindings.java.compiler.test.Test.S4 p_object_struct_array(
		etch.bindings.java.compiler.test.Test.S4 a
	)
	;
	/**
	 */
	public Integer alwaysWorks(
	)
	;
	/**
	 */
	public Boolean isTrue(
	)
	;
	/**
	 */
	public void alwaysFails(
	)
	;
	/**
	 */
	public Boolean isFalse(
	)
	;
	/**
	 */
	public void m1(
	)
	;
	/**
	 */
	public Boolean can_m1(
	)
	;
	/**
	 */
	public void m2(
	)
	;
	/**
	 */
	public Boolean can_m2(
		Boolean x
	)
	;
	/**
	 */
	public void m3(
	)
	;
	/**
	 */
	public Boolean can_m3(
		Boolean x
	)
	;
	/**
	 */
	public void m4(
	)
	;
	/**
	 */
	public Boolean can_m4(
		Boolean x
	)
	;
	/**
	 */
	public void m5(
	)
	;
	/**
	 */
	public Boolean can_m5(
		Byte x
	)
	;
	/**
	 */
	public void m6(
	)
	;
	/**
	 */
	public Boolean can_m6(
		Short x
	)
	;
	/**
	 */
	public void m7(
	)
	;
	/**
	 */
	public Boolean can_m7(
		Integer x
	)
	;
	/**
	 */
	public void m8(
	)
	;
	/**
	 */
	public Boolean can_m8(
		Long x
	)
	;
	/**
	 */
	public void m9(
	)
	;
	/**
	 */
	public Boolean can_m9(
		Float x
	)
	;
	/**
	 */
	public void m10(
	)
	;
	/**
	 */
	public Boolean can_m10(
		Double x
	)
	;
	/**
	 */
	public void m11(
	)
	;
	/**
	 */
	public Boolean can_m11(
		String x
	)
	;
	/**
	 */
	public void m12(
	)
	;
	/**
	 */
	public Boolean can_m12(
		Integer x
	)
	;
	/**
	 */
	public void m13(
		Integer k
	)
	;
	/**
	 */
	public Boolean can_m13(
		Integer x
	)
	;
	/**
	 */
	public void m14(
		etch.bindings.java.compiler.test.Test.S1 k
	)
	;
	/**
	 */
	public Boolean can_m14(
		Integer x
	)
	;
	/**
	 */
	public void m15(
	)
	;
	/**
	 */
	public Boolean can_m15(
		etch.bindings.java.compiler.test.Test.E1 x
	)
	;
}
