// This file automatically generated by:
//   @EtchVersion@ (@EtchBuildTag@) / java @EtchVersion@ (@EtchBuildTag@)
//   Mon Nov 12 14:29:21 CST 2007

package etch.bindings.java.compiler.test;

import etch.bindings.java.msg.Message;
import etch.bindings.java.support.MessageSource;
import etch.bindings.java.support.Pool;
import etch.bindings.java.support._Etch_AuthException;
import metreos.core.Who;
import etch.bindings.java.support.StubBase;
import etch.bindings.java.support.Pool.PoolRunnable;
import etch.bindings.java.util.StrIntHashMap;

/**
 * Message to call translator for Test.
 */
@SuppressWarnings("unused")
public class StubTest extends StubBase
{
	/**
	 * Stub for Test.
	 * @param src the source of messages.
	 * @param obj the implementation of Test responsive to requests.
	 * @param queued thread pool used to run AsyncReceiverMode.QUEUED methods.
	 * @param free thread pool used to run AsyncReceiverMode.FREE methods.
	 */
	public StubTest( MessageSource src, Test obj, Pool queued, Pool free )
	{
		super( src, obj, queued, free );
		this._obj = obj;
	}
	
	@SuppressWarnings("unused")
	private final Test _obj;

	@Override
	public boolean message( final Who _sender, final Message _msg )
		throws Exception
	{
		if (_msg == null)
		{
			super.message( _sender, _msg );
			return true;
		}

		switch (_msg.type().getId())
		{
			case -210506049: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_nothing
				_free.run( new PoolRunnable() { public void run() throws Exception {
				do_nothing( _sender, _msg );
				} public void exception( Exception e ) { /* TODO */ } } );
				return true;
			case 386005890: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_incr
				_queued.run( new PoolRunnable() { public void run() throws Exception {
				do_incr( _sender, _msg );
				} public void exception( Exception e ) { /* TODO */ } } );
				return true;
			case -2054962573: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_add
				do_add( _sender, _msg );
				return true;
			case -1905140302: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_sub
				do_sub( _sender, _msg );
				return true;
			case -1905140291: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_sum
				do_sum( _sender, _msg );
				return true;
			case 1229069690: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_trans
				do_trans( _sender, _msg );
				return true;
			case 737779252: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_dist
				do_dist( _sender, _msg );
				return true;
			case -1996472847: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_fill
				do_fill( _sender, _msg );
				return true;
			case 811551504: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_fillObject
				do_fillObject( _sender, _msg );
				return true;
			case -798873024: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_blow
				do_blow( _sender, _msg );
				return true;
			case 667489587: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_beets
				do_beets( _sender, _msg );
				return true;
			case -1266163811: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_throwExcp5
				do_throwExcp5( _sender, _msg );
				return true;
			case -1266163810: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_throwExcp6
				do_throwExcp6( _sender, _msg );
				return true;
			case 899044555: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_boolean
				do_p_boolean( _sender, _msg );
				return true;
			case 1182301925: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_boolean_array
				do_p_boolean_array( _sender, _msg );
				return true;
			case -176870683: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_byte
				do_p_byte( _sender, _msg );
				return true;
			case -49115649: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_byte_array
				do_p_byte_array( _sender, _msg );
				return true;
			case -66079009: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_short
				do_p_short( _sender, _msg );
				return true;
			case -233209095: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_short_array
				do_p_short_array( _sender, _msg );
				return true;
			case -914383022: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_int
				do_p_int( _sender, _msg );
				return true;
			case -965308692: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_int_array
				do_p_int_array( _sender, _msg );
				return true;
			case -1043941927: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_long
				do_p_long( _sender, _msg );
				return true;
			case -2057278733: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_long_array
				do_p_long_array( _sender, _msg );
				return true;
			case 1125720735: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_float
				do_p_float( _sender, _msg );
				return true;
			case -1383772487: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_float_array
				do_p_float_array( _sender, _msg );
				return true;
			case 1557778958: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_double
				do_p_double( _sender, _msg );
				return true;
			case 1559029672: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_double_array
				do_p_double_array( _sender, _msg );
				return true;
			case 1961974414: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_string
				do_p_string( _sender, _msg );
				return true;
			case -961564632: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_string_array
				do_p_string_array( _sender, _msg );
				return true;
			case 1429258377: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_E1
				do_p_E1( _sender, _msg );
				return true;
			case 1151298979: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_E1_array
				do_p_E1_array( _sender, _msg );
				return true;
			case 1430176763: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S1
				do_p_S1( _sender, _msg );
				return true;
			case 798434837: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S1_array
				do_p_S1_array( _sender, _msg );
				return true;
			case 1430176764: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S2
				do_p_S2( _sender, _msg );
				return true;
			case 96605334: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S2_array
				do_p_S2_array( _sender, _msg );
				return true;
			case 506415162: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_Blob
				do_p_Blob( _sender, _msg );
				return true;
			case 1746033620: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_Blob_array
				do_p_Blob_array( _sender, _msg );
				return true;
			case -546873124: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object
				do_p_object( _sender, _msg );
				return true;
			case 1657889142: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object_array
				do_p_object_array( _sender, _msg );
				return true;
			case -742932072: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object_struct
				do_p_object_struct( _sender, _msg );
				return true;
			case 1075374130: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object_struct_array
				do_p_object_struct_array( _sender, _msg );
				return true;
			case -1074472315: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_alwaysWorks
				do_alwaysWorks( _sender, _msg );
				return true;
			case 434444166: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_isTrue
				do_isTrue( _sender, _msg );
				return true;
			case -1384802888: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_alwaysFails
				do_alwaysFails( _sender, _msg );
				return true;
			case -1532677237: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_isFalse
				do_isFalse( _sender, _msg );
				return true;
			case 1823198450: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m1
				do_m1( _sender, _msg );
				return true;
			case 2122984609: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m1
				do_can_m1( _sender, _msg );
				return true;
			case 1823198451: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m2
				do_m2( _sender, _msg );
				return true;
			case 2122984610: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m2
				do_can_m2( _sender, _msg );
				return true;
			case 1823198452: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m3
				do_m3( _sender, _msg );
				return true;
			case 2122984611: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m3
				do_can_m3( _sender, _msg );
				return true;
			case 1823198453: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m4
				do_m4( _sender, _msg );
				return true;
			case 2122984612: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m4
				do_can_m4( _sender, _msg );
				return true;
			case 1823198454: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m5
				do_m5( _sender, _msg );
				return true;
			case 2122984613: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m5
				do_can_m5( _sender, _msg );
				return true;
			case 1823198455: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m6
				do_m6( _sender, _msg );
				return true;
			case 2122984614: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m6
				do_can_m6( _sender, _msg );
				return true;
			case 1823198456: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m7
				do_m7( _sender, _msg );
				return true;
			case 2122984615: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m7
				do_can_m7( _sender, _msg );
				return true;
			case 1823198457: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m8
				do_m8( _sender, _msg );
				return true;
			case 2122984616: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m8
				do_can_m8( _sender, _msg );
				return true;
			case 1823198458: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m9
				do_m9( _sender, _msg );
				return true;
			case 2122984617: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m9
				do_can_m9( _sender, _msg );
				return true;
			case -1959170114: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m10
				do_m10( _sender, _msg );
				return true;
			case 1352793039: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m10
				do_can_m10( _sender, _msg );
				return true;
			case -1959170113: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m11
				do_m11( _sender, _msg );
				return true;
			case 1352793040: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m11
				do_can_m11( _sender, _msg );
				return true;
			case -1959170112: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m12
				do_m12( _sender, _msg );
				return true;
			case 1352793041: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m12
				do_can_m12( _sender, _msg );
				return true;
			case -1959170111: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m13
				do_m13( _sender, _msg );
				return true;
			case 1352793042: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m13
				do_can_m13( _sender, _msg );
				return true;
			case -1959170110: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m14
				do_m14( _sender, _msg );
				return true;
			case 1352793043: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m14
				do_can_m14( _sender, _msg );
				return true;
			case -1959170109: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m15
				do_m15( _sender, _msg );
				return true;
			case 1352793044: // ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m15
				do_can_m15( _sender, _msg );
				return true;
			default:
				return super.message( _sender, _msg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_nothing( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			_obj.nothing(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_nothing );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_nothing );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_incr( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.incr(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_incr );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_incr );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_add( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;
			Integer y =
				(Integer)
					_msg.get( ValueFactoryTest._mf_y )
				;

			Object _result =
			_obj.add(
				x
				, y
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_add );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_add );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_sub( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;
			Integer y =
				(Integer)
					_msg.get( ValueFactoryTest._mf_y )
				;

			Object _result =
			_obj.sub(
				x
				, y
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_sub );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_sub );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_sum( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			int[] x =
				(int[])
//				ValueFactoryTest.to_int(
//					int[].class,
					_msg.get( ValueFactoryTest._mf_x )
//				)
				;

			Object _result =
			_obj.sum(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_sum );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_sum );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_trans( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.E1 e =
				(etch.bindings.java.compiler.test.Test.E1)
					_msg.get( ValueFactoryTest._mf_e )
				;
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.trans(
				e
				, x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_trans );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_trans );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_dist( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S1 a =
				(etch.bindings.java.compiler.test.Test.S1)
					_msg.get( ValueFactoryTest._mf_a )
				;
			etch.bindings.java.compiler.test.Test.S1 b =
				(etch.bindings.java.compiler.test.Test.S1)
					_msg.get( ValueFactoryTest._mf_b )
				;

			Object _result =
			_obj.dist(
				a
				, b
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_dist );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_dist );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_fill( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer n =
				(Integer)
					_msg.get( ValueFactoryTest._mf_n )
				;
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.fill(
				n
				, x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_fill );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_fill );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_fillObject( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer n =
				(Integer)
					_msg.get( ValueFactoryTest._mf_n )
				;
			Object o =
				(Object)
					_msg.get( ValueFactoryTest._mf_o )
				;

			Object _result =
			_obj.fillObject(
				n
				, o
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_fillObject );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_fillObject );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_blow( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			String msg =
				(String)
					_msg.get( ValueFactoryTest._mf_msg )
				;
			Integer code =
				(Integer)
					_msg.get( ValueFactoryTest._mf_code )
				;

			_obj.blow(
				msg
				, code
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_blow );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_blow );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_beets( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.E1 e =
				(etch.bindings.java.compiler.test.Test.E1)
					_msg.get( ValueFactoryTest._mf_e )
				;

			Object _result =
			_obj.beets(
				e
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_beets );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_beets );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_throwExcp5( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			String msg =
				(String)
					_msg.get( ValueFactoryTest._mf_msg )
				;
			Integer code =
				(Integer)
					_msg.get( ValueFactoryTest._mf_code )
				;
			Object value =
				(Object)
					_msg.get( ValueFactoryTest._mf_value )
				;

			_obj.throwExcp5(
				msg
				, code
				, value
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_throwExcp5 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_throwExcp5 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_throwExcp6( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			String msg =
				(String)
					_msg.get( ValueFactoryTest._mf_msg )
				;
			Integer code =
				(Integer)
					_msg.get( ValueFactoryTest._mf_code )
				;
			Object[] value =
				(Object[])
//				ValueFactoryTest.to_object(
//					Object[].class,
					_msg.get( ValueFactoryTest._mf_value )
//				)
				;

			_obj.throwExcp6(
				msg
				, code
				, value
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_throwExcp6 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_throwExcp6 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_boolean( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Boolean a =
				(Boolean)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_boolean(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_boolean );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_boolean );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_boolean_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			boolean[] a =
				(boolean[])
//				ValueFactoryTest.to_boolean(
//					boolean[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_boolean_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_boolean_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_boolean_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_byte( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Byte a =
				(Byte)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_byte(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_byte );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_byte );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_byte_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			byte[] a =
				(byte[])
//				ValueFactoryTest.to_byte(
//					byte[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_byte_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_byte_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_byte_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_short( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Short a =
				(Short)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_short(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_short );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_short );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_short_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			short[] a =
				(short[])
//				ValueFactoryTest.to_short(
//					short[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_short_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_short_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_short_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_int( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer a =
				(Integer)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_int(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_int );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_int );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_int_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			int[] a =
				(int[])
//				ValueFactoryTest.to_int(
//					int[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_int_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_int_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_int_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_long( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Long a =
				(Long)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_long(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_long );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_long );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_long_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			long[] a =
				(long[])
//				ValueFactoryTest.to_long(
//					long[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_long_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_long_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_long_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_float( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Float a =
				(Float)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_float(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_float );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_float );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_float_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			float[] a =
				(float[])
//				ValueFactoryTest.to_float(
//					float[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_float_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_float_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_float_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_double( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Double a =
				(Double)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_double(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_double );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_double );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_double_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			double[] a =
				(double[])
//				ValueFactoryTest.to_double(
//					double[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_double_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_double_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_double_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_string( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			String a =
				(String)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_string(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_string );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_string );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_string_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			String[] a =
				(String[])
//				ValueFactoryTest.to_string(
//					String[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_string_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_string_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_string_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_E1( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.E1 a =
				(etch.bindings.java.compiler.test.Test.E1)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_E1(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_E1 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_E1 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_E1_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.E1[] a =
				(etch.bindings.java.compiler.test.Test.E1[])
//				ValueFactoryTest.to_E1(
//					etch.bindings.java.compiler.test.Test.E1[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_E1_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_E1_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_E1_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_S1( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S1 a =
				(etch.bindings.java.compiler.test.Test.S1)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_S1(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S1 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S1 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_S1_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S1[] a =
				(etch.bindings.java.compiler.test.Test.S1[])
//				ValueFactoryTest.to_S1(
//					etch.bindings.java.compiler.test.Test.S1[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_S1_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S1_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S1_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_S2( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S2 a =
				(etch.bindings.java.compiler.test.Test.S2)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_S2(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S2 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S2 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_S2_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S2[] a =
				(etch.bindings.java.compiler.test.Test.S2[])
//				ValueFactoryTest.to_S2(
//					etch.bindings.java.compiler.test.Test.S2[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_S2_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S2_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S2_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_Blob( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			StrIntHashMap a =
				(StrIntHashMap)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_Blob(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_Blob );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_Blob );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_Blob_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			StrIntHashMap[] a =
				(StrIntHashMap[])
//				ValueFactoryTest.to_Blob(
//					StrIntHashMap[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_Blob_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_Blob_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_Blob_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_object( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Object a =
				(Object)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_object(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_object_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Object[] a =
				(Object[])
//				ValueFactoryTest.to_object(
//					Object[].class,
					_msg.get( ValueFactoryTest._mf_a )
//				)
				;

			Object _result =
			_obj.p_object_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_object_struct( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S3 a =
				(etch.bindings.java.compiler.test.Test.S3)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_object_struct(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_struct );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_struct );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_p_object_struct_array( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S4 a =
				(etch.bindings.java.compiler.test.Test.S4)
					_msg.get( ValueFactoryTest._mf_a )
				;

			Object _result =
			_obj.p_object_struct_array(
				a
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_struct_array );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_struct_array );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_alwaysWorks( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.isTrue(
			))
			throw new _Etch_AuthException( "stub could not authorize alwaysWorks using isTrue" );
			Object _result =
			_obj.alwaysWorks(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_alwaysWorks );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_alwaysWorks );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_isTrue( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			Object _result =
			_obj.isTrue(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_isTrue );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_isTrue );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_alwaysFails( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.isFalse(
			))
			throw new _Etch_AuthException( "stub could not authorize alwaysFails using isFalse" );
			_obj.alwaysFails(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_alwaysFails );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_alwaysFails );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_isFalse( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			Object _result =
			_obj.isFalse(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_isFalse );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_isFalse );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m1( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m1(
			))
			throw new _Etch_AuthException( "stub could not authorize m1 using can_m1" );
			_obj.m1(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m1 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m1 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m1( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			Object _result =
			_obj.can_m1(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m1 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m1 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m2( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m2(
				null
			))
			throw new _Etch_AuthException( "stub could not authorize m2 using can_m2" );
			_obj.m2(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m2 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m2 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m2( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Boolean x =
				(Boolean)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m2(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m2 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m2 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m3( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m3(
				(boolean) false
			))
			throw new _Etch_AuthException( "stub could not authorize m3 using can_m3" );
			_obj.m3(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m3 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m3 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m3( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Boolean x =
				(Boolean)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m3(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m3 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m3 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m4( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m4(
				(boolean) true
			))
			throw new _Etch_AuthException( "stub could not authorize m4 using can_m4" );
			_obj.m4(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m4 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m4 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m4( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Boolean x =
				(Boolean)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m4(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m4 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m4 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m5( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m5(
				(byte) 23
			))
			throw new _Etch_AuthException( "stub could not authorize m5 using can_m5" );
			_obj.m5(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m5 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m5 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m5( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Byte x =
				(Byte)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m5(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m5 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m5 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m6( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m6(
				(short) 2323
			))
			throw new _Etch_AuthException( "stub could not authorize m6 using can_m6" );
			_obj.m6(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m6 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m6 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m6( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Short x =
				(Short)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m6(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m6 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m6 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m7( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m7(
				(int) 23232323
			))
			throw new _Etch_AuthException( "stub could not authorize m7 using can_m7" );
			_obj.m7(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m7 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m7 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m7( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m7(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m7 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m7 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m8( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m8(
				(long) 2323232323232323l
			))
			throw new _Etch_AuthException( "stub could not authorize m8 using can_m8" );
			_obj.m8(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m8 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m8 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m8( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Long x =
				(Long)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m8(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m8 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m8 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m9( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m9(
				(float) 3.1415926535897932384626433832795f
			))
			throw new _Etch_AuthException( "stub could not authorize m9 using can_m9" );
			_obj.m9(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m9 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m9 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m9( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Float x =
				(Float)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m9(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m9 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m9 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m10( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m10(
				(double) 3.1415926535897932384626433832795d
			))
			throw new _Etch_AuthException( "stub could not authorize m10 using can_m10" );
			_obj.m10(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m10 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m10 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m10( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Double x =
				(Double)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m10(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m10 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m10 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m11( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m11(
				(String) "abc"
			))
			throw new _Etch_AuthException( "stub could not authorize m11 using can_m11" );
			_obj.m11(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m11 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m11 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m11( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			String x =
				(String)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m11(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m11 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m11 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m12( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m12(
				etch.bindings.java.compiler.test.Test.INT1
			))
			throw new _Etch_AuthException( "stub could not authorize m12 using can_m12" );
			_obj.m12(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m12 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m12 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m12( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m12(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m12 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m12 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m13( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer k =
				(Integer)
					_msg.get( ValueFactoryTest._mf_k )
				;

			if (!_obj.can_m13(
				k
			))
			throw new _Etch_AuthException( "stub could not authorize m13 using can_m13" );
			_obj.m13(
				k
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m13 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m13 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m13( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m13(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m13 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m13 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m14( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.S1 k =
				(etch.bindings.java.compiler.test.Test.S1)
					_msg.get( ValueFactoryTest._mf_k )
				;

			if (!_obj.can_m14(
				k.x
			))
			throw new _Etch_AuthException( "stub could not authorize m14 using can_m14" );
			_obj.m14(
				k
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m14 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m14 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m14( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			Integer x =
				(Integer)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m14(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m14 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m14 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_m15( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{

			if (!_obj.can_m15(
				etch.bindings.java.compiler.test.Test.E1.A
			))
			throw new _Etch_AuthException( "stub could not authorize m15 using can_m15" );
			_obj.m15(
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m15 );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m15 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_can_m15( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
			etch.bindings.java.compiler.test.Test.E1 x =
				(etch.bindings.java.compiler.test.Test.E1)
					_msg.get( ValueFactoryTest._mf_x )
				;

			Object _result =
			_obj.can_m15(
				x
			);

			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m15 );
			_rmsg.put( ValueFactoryTest._mf_result, _result );
			_src.messagex( _sender, _rmsg );
		}
		catch ( Exception e )
		{
			Message _rmsg = _msg.reply( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m15 );
			_rmsg.put( ValueFactoryTest._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}
}
