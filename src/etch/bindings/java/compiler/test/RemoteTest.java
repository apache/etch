// This file automatically generated by:
//   @EtchVersion@ (@EtchBuildTag@) / java @EtchVersion@ (@EtchBuildTag@)
//   Mon Nov 12 14:29:21 CST 2007

package etch.bindings.java.compiler.test;

import etch.bindings.java.util.StrIntHashMap;

/**
 * Call to message translator for Test.
 */
@SuppressWarnings("unused")
public class RemoteTest extends etch.bindings.java.support.RemoteBase<ValueFactoryTest> implements Test
{
	/**
	 * Constructs the RemoteTest.
	 *
	 * @param svc
	 */
	public RemoteTest( etch.bindings.java.support.DeliveryService svc )
	{
		this( svc, new ValueFactoryTest() );
	}

	/**
	 * Constructs the RemoteTest.
	 *
	 * @param svc
	 * @param vf
	 */
	protected RemoteTest( etch.bindings.java.support.DeliveryService svc, ValueFactoryTest vf )
	{
		super( svc, vf );
	}

	public void nothing(
	)
	{
		_end_nothing( _begin_nothing(
		) );
	}
	
	/**
	 * Begins the call to nothing.
	 * @return mailbox to use to retrieve the result using _end_nothing.
	 */
	public etch.bindings.java.support.Mailbox _begin_nothing(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_nothing );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_nothing.
	 */
	public void _end_nothing( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_nothing,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer incr(
		Integer x
	)
	{
		return
		_end_incr( _begin_incr(
			x
		) );
	}
	
	/**
	 * Begins the call to incr.
	 * @return mailbox to use to retrieve the result using _end_incr.
	 */
	public etch.bindings.java.support.Mailbox _begin_incr(
		Integer x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_incr );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_incr.
	 */
	public Integer _end_incr( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_incr,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer add(
		Integer x
		, Integer y
	)
	{
		return
		_end_add( _begin_add(
			x
			, y
		) );
	}
	
	/**
	 * Begins the call to add.
	 * @return mailbox to use to retrieve the result using _end_add.
	 */
	public etch.bindings.java.support.Mailbox _begin_add(
		Integer x
		, Integer y
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_add );
		_msg.put( ValueFactoryTest._mf_x, x );
		_msg.put( ValueFactoryTest._mf_y, y );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_add.
	 */
	public Integer _end_add( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_add,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer sub(
		Integer x
		, Integer y
	)
	{
		return
		_end_sub( _begin_sub(
			x
			, y
		) );
	}
	
	/**
	 * Begins the call to sub.
	 * @return mailbox to use to retrieve the result using _end_sub.
	 */
	public etch.bindings.java.support.Mailbox _begin_sub(
		Integer x
		, Integer y
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_sub );
		_msg.put( ValueFactoryTest._mf_x, x );
		_msg.put( ValueFactoryTest._mf_y, y );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_sub.
	 */
	public Integer _end_sub( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_sub,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer sum(
		int[] x
	)
	{
		return
		_end_sum( _begin_sum(
			x
		) );
	}
	
	/**
	 * Begins the call to sum.
	 * @return mailbox to use to retrieve the result using _end_sum.
	 */
	public etch.bindings.java.support.Mailbox _begin_sum(
		int[] x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_sum );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_sum.
	 */
	public Integer _end_sum( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_sum,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer trans(
		etch.bindings.java.compiler.test.Test.E1 e
		, Integer x
	)
	{
		return
		_end_trans( _begin_trans(
			e
			, x
		) );
	}
	
	/**
	 * Begins the call to trans.
	 * @return mailbox to use to retrieve the result using _end_trans.
	 */
	public etch.bindings.java.support.Mailbox _begin_trans(
		etch.bindings.java.compiler.test.Test.E1 e
		, Integer x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_trans );
		_msg.put( ValueFactoryTest._mf_e, e );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_trans.
	 */
	public Integer _end_trans( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_trans,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Double dist(
		etch.bindings.java.compiler.test.Test.S1 a
		, etch.bindings.java.compiler.test.Test.S1 b
	)
	{
		return
		_end_dist( _begin_dist(
			a
			, b
		) );
	}
	
	/**
	 * Begins the call to dist.
	 * @return mailbox to use to retrieve the result using _end_dist.
	 */
	public etch.bindings.java.support.Mailbox _begin_dist(
		etch.bindings.java.compiler.test.Test.S1 a
		, etch.bindings.java.compiler.test.Test.S1 b
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_dist );
		_msg.put( ValueFactoryTest._mf_a, a );
		_msg.put( ValueFactoryTest._mf_b, b );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_dist.
	 */
	public Double _end_dist( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Double)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_dist,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public int[] fill(
		Integer n
		, Integer x
	)
	{
		return
		_end_fill( _begin_fill(
			n
			, x
		) );
	}
	
	/**
	 * Begins the call to fill.
	 * @return mailbox to use to retrieve the result using _end_fill.
	 */
	public etch.bindings.java.support.Mailbox _begin_fill(
		Integer n
		, Integer x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_fill );
		_msg.put( ValueFactoryTest._mf_n, n );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_fill.
	 */
	public int[] _end_fill( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(int[])
//				_vf.to_int(
//					int[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_fill,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Object[] fillObject(
		Integer n
		, Object o
	)
	{
		return
		_end_fillObject( _begin_fillObject(
			n
			, o
		) );
	}
	
	/**
	 * Begins the call to fillObject.
	 * @return mailbox to use to retrieve the result using _end_fillObject.
	 */
	public etch.bindings.java.support.Mailbox _begin_fillObject(
		Integer n
		, Object o
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_fillObject );
		_msg.put( ValueFactoryTest._mf_n, n );
		_msg.put( ValueFactoryTest._mf_o, o );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_fillObject.
	 */
	public Object[] _end_fillObject( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Object[])
//				_vf.to_object(
//					Object[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_fillObject,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void blow(
		String msg
		, Integer code
	)
	throws
		Excp1
	{
		_end_blow( _begin_blow(
			msg
			, code
		) );
	}
	
	/**
	 * Begins the call to blow.
	 * @return mailbox to use to retrieve the result using _end_blow.
	 */
	public etch.bindings.java.support.Mailbox _begin_blow(
		String msg
		, Integer code
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_blow );
		_msg.put( ValueFactoryTest._mf_msg, msg );
		_msg.put( ValueFactoryTest._mf_code, code );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_blow.
	 */
	public void _end_blow( etch.bindings.java.support.Mailbox _mb )
		throws
			Excp1
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_blow,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof Excp1) throw (Excp1) _e;
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer beets(
		etch.bindings.java.compiler.test.Test.E1 e
	)
	throws
		Excp3
		, Excp4
	{
		return
		_end_beets( _begin_beets(
			e
		) );
	}
	
	/**
	 * Begins the call to beets.
	 * @return mailbox to use to retrieve the result using _end_beets.
	 */
	public etch.bindings.java.support.Mailbox _begin_beets(
		etch.bindings.java.compiler.test.Test.E1 e
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_beets );
		_msg.put( ValueFactoryTest._mf_e, e );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_beets.
	 */
	public Integer _end_beets( etch.bindings.java.support.Mailbox _mb )
		throws
			Excp3
			, Excp4
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_beets,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof Excp3) throw (Excp3) _e;
			if (_e instanceof Excp4) throw (Excp4) _e;
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void throwExcp5(
		String msg
		, Integer code
		, Object value
	)
	throws
		Excp5
	{
		_end_throwExcp5( _begin_throwExcp5(
			msg
			, code
			, value
		) );
	}
	
	/**
	 * Begins the call to throwExcp5.
	 * @return mailbox to use to retrieve the result using _end_throwExcp5.
	 */
	public etch.bindings.java.support.Mailbox _begin_throwExcp5(
		String msg
		, Integer code
		, Object value
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_throwExcp5 );
		_msg.put( ValueFactoryTest._mf_msg, msg );
		_msg.put( ValueFactoryTest._mf_code, code );
		_msg.put( ValueFactoryTest._mf_value, value );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_throwExcp5.
	 */
	public void _end_throwExcp5( etch.bindings.java.support.Mailbox _mb )
		throws
			Excp5
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_throwExcp5,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof Excp5) throw (Excp5) _e;
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void throwExcp6(
		String msg
		, Integer code
		, Object[] value
	)
	throws
		Excp6
	{
		_end_throwExcp6( _begin_throwExcp6(
			msg
			, code
			, value
		) );
	}
	
	/**
	 * Begins the call to throwExcp6.
	 * @return mailbox to use to retrieve the result using _end_throwExcp6.
	 */
	public etch.bindings.java.support.Mailbox _begin_throwExcp6(
		String msg
		, Integer code
		, Object[] value
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_throwExcp6 );
		_msg.put( ValueFactoryTest._mf_msg, msg );
		_msg.put( ValueFactoryTest._mf_code, code );
		_msg.put( ValueFactoryTest._mf_value, value );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_throwExcp6.
	 */
	public void _end_throwExcp6( etch.bindings.java.support.Mailbox _mb )
		throws
			Excp6
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_throwExcp6,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof Excp6) throw (Excp6) _e;
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean p_boolean(
		Boolean a
	)
	{
		return
		_end_p_boolean( _begin_p_boolean(
			a
		) );
	}
	
	/**
	 * Begins the call to p_boolean.
	 * @return mailbox to use to retrieve the result using _end_p_boolean.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_boolean(
		Boolean a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_boolean );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_boolean.
	 */
	public Boolean _end_p_boolean( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_boolean,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public boolean[] p_boolean_array(
		boolean[] a
	)
	{
		return
		_end_p_boolean_array( _begin_p_boolean_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_boolean_array.
	 * @return mailbox to use to retrieve the result using _end_p_boolean_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_boolean_array(
		boolean[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_boolean_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_boolean_array.
	 */
	public boolean[] _end_p_boolean_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(boolean[])
//				_vf.to_boolean(
//					boolean[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_boolean_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Byte p_byte(
		Byte a
	)
	{
		return
		_end_p_byte( _begin_p_byte(
			a
		) );
	}
	
	/**
	 * Begins the call to p_byte.
	 * @return mailbox to use to retrieve the result using _end_p_byte.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_byte(
		Byte a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_byte );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_byte.
	 */
	public Byte _end_p_byte( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Byte)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_byte,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public byte[] p_byte_array(
		byte[] a
	)
	{
		return
		_end_p_byte_array( _begin_p_byte_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_byte_array.
	 * @return mailbox to use to retrieve the result using _end_p_byte_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_byte_array(
		byte[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_byte_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_byte_array.
	 */
	public byte[] _end_p_byte_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(byte[])
//				_vf.to_byte(
//					byte[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_byte_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Short p_short(
		Short a
	)
	{
		return
		_end_p_short( _begin_p_short(
			a
		) );
	}
	
	/**
	 * Begins the call to p_short.
	 * @return mailbox to use to retrieve the result using _end_p_short.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_short(
		Short a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_short );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_short.
	 */
	public Short _end_p_short( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Short)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_short,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public short[] p_short_array(
		short[] a
	)
	{
		return
		_end_p_short_array( _begin_p_short_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_short_array.
	 * @return mailbox to use to retrieve the result using _end_p_short_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_short_array(
		short[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_short_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_short_array.
	 */
	public short[] _end_p_short_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(short[])
//				_vf.to_short(
//					short[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_short_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer p_int(
		Integer a
	)
	{
		return
		_end_p_int( _begin_p_int(
			a
		) );
	}
	
	/**
	 * Begins the call to p_int.
	 * @return mailbox to use to retrieve the result using _end_p_int.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_int(
		Integer a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_int );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_int.
	 */
	public Integer _end_p_int( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_int,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public int[] p_int_array(
		int[] a
	)
	{
		return
		_end_p_int_array( _begin_p_int_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_int_array.
	 * @return mailbox to use to retrieve the result using _end_p_int_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_int_array(
		int[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_int_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_int_array.
	 */
	public int[] _end_p_int_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(int[])
//				_vf.to_int(
//					int[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_int_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Long p_long(
		Long a
	)
	{
		return
		_end_p_long( _begin_p_long(
			a
		) );
	}
	
	/**
	 * Begins the call to p_long.
	 * @return mailbox to use to retrieve the result using _end_p_long.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_long(
		Long a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_long );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_long.
	 */
	public Long _end_p_long( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Long)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_long,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public long[] p_long_array(
		long[] a
	)
	{
		return
		_end_p_long_array( _begin_p_long_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_long_array.
	 * @return mailbox to use to retrieve the result using _end_p_long_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_long_array(
		long[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_long_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_long_array.
	 */
	public long[] _end_p_long_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(long[])
//				_vf.to_long(
//					long[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_long_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Float p_float(
		Float a
	)
	{
		return
		_end_p_float( _begin_p_float(
			a
		) );
	}
	
	/**
	 * Begins the call to p_float.
	 * @return mailbox to use to retrieve the result using _end_p_float.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_float(
		Float a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_float );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_float.
	 */
	public Float _end_p_float( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Float)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_float,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public float[] p_float_array(
		float[] a
	)
	{
		return
		_end_p_float_array( _begin_p_float_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_float_array.
	 * @return mailbox to use to retrieve the result using _end_p_float_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_float_array(
		float[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_float_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_float_array.
	 */
	public float[] _end_p_float_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(float[])
//				_vf.to_float(
//					float[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_float_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Double p_double(
		Double a
	)
	{
		return
		_end_p_double( _begin_p_double(
			a
		) );
	}
	
	/**
	 * Begins the call to p_double.
	 * @return mailbox to use to retrieve the result using _end_p_double.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_double(
		Double a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_double );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_double.
	 */
	public Double _end_p_double( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Double)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_double,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public double[] p_double_array(
		double[] a
	)
	{
		return
		_end_p_double_array( _begin_p_double_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_double_array.
	 * @return mailbox to use to retrieve the result using _end_p_double_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_double_array(
		double[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_double_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_double_array.
	 */
	public double[] _end_p_double_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(double[])
//				_vf.to_double(
//					double[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_double_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public String p_string(
		String a
	)
	{
		return
		_end_p_string( _begin_p_string(
			a
		) );
	}
	
	/**
	 * Begins the call to p_string.
	 * @return mailbox to use to retrieve the result using _end_p_string.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_string(
		String a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_string );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_string.
	 */
	public String _end_p_string( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(String)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_string,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public String[] p_string_array(
		String[] a
	)
	{
		return
		_end_p_string_array( _begin_p_string_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_string_array.
	 * @return mailbox to use to retrieve the result using _end_p_string_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_string_array(
		String[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_string_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_string_array.
	 */
	public String[] _end_p_string_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(String[])
//				_vf.to_string(
//					String[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_string_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.E1 p_E1(
		etch.bindings.java.compiler.test.Test.E1 a
	)
	{
		return
		_end_p_E1( _begin_p_E1(
			a
		) );
	}
	
	/**
	 * Begins the call to p_E1.
	 * @return mailbox to use to retrieve the result using _end_p_E1.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_E1(
		etch.bindings.java.compiler.test.Test.E1 a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_E1 );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_E1.
	 */
	public etch.bindings.java.compiler.test.Test.E1 _end_p_E1( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.E1)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_E1,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.E1[] p_E1_array(
		etch.bindings.java.compiler.test.Test.E1[] a
	)
	{
		return
		_end_p_E1_array( _begin_p_E1_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_E1_array.
	 * @return mailbox to use to retrieve the result using _end_p_E1_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_E1_array(
		etch.bindings.java.compiler.test.Test.E1[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_E1_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_E1_array.
	 */
	public etch.bindings.java.compiler.test.Test.E1[] _end_p_E1_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.E1[])
//				_vf.to_E1(
//					etch.bindings.java.compiler.test.Test.E1[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_E1_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.S1 p_S1(
		etch.bindings.java.compiler.test.Test.S1 a
	)
	{
		return
		_end_p_S1( _begin_p_S1(
			a
		) );
	}
	
	/**
	 * Begins the call to p_S1.
	 * @return mailbox to use to retrieve the result using _end_p_S1.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_S1(
		etch.bindings.java.compiler.test.Test.S1 a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S1 );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_S1.
	 */
	public etch.bindings.java.compiler.test.Test.S1 _end_p_S1( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.S1)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S1,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.S1[] p_S1_array(
		etch.bindings.java.compiler.test.Test.S1[] a
	)
	{
		return
		_end_p_S1_array( _begin_p_S1_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_S1_array.
	 * @return mailbox to use to retrieve the result using _end_p_S1_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_S1_array(
		etch.bindings.java.compiler.test.Test.S1[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S1_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_S1_array.
	 */
	public etch.bindings.java.compiler.test.Test.S1[] _end_p_S1_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.S1[])
//				_vf.to_S1(
//					etch.bindings.java.compiler.test.Test.S1[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S1_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.S2 p_S2(
		etch.bindings.java.compiler.test.Test.S2 a
	)
	{
		return
		_end_p_S2( _begin_p_S2(
			a
		) );
	}
	
	/**
	 * Begins the call to p_S2.
	 * @return mailbox to use to retrieve the result using _end_p_S2.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_S2(
		etch.bindings.java.compiler.test.Test.S2 a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S2 );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_S2.
	 */
	public etch.bindings.java.compiler.test.Test.S2 _end_p_S2( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.S2)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S2,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.S2[] p_S2_array(
		etch.bindings.java.compiler.test.Test.S2[] a
	)
	{
		return
		_end_p_S2_array( _begin_p_S2_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_S2_array.
	 * @return mailbox to use to retrieve the result using _end_p_S2_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_S2_array(
		etch.bindings.java.compiler.test.Test.S2[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_S2_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_S2_array.
	 */
	public etch.bindings.java.compiler.test.Test.S2[] _end_p_S2_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.S2[])
//				_vf.to_S2(
//					etch.bindings.java.compiler.test.Test.S2[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_S2_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public StrIntHashMap p_Blob(
		StrIntHashMap a
	)
	{
		return
		_end_p_Blob( _begin_p_Blob(
			a
		) );
	}
	
	/**
	 * Begins the call to p_Blob.
	 * @return mailbox to use to retrieve the result using _end_p_Blob.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_Blob(
		StrIntHashMap a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_Blob );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_Blob.
	 */
	public StrIntHashMap _end_p_Blob( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(StrIntHashMap)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_Blob,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public StrIntHashMap[] p_Blob_array(
		StrIntHashMap[] a
	)
	{
		return
		_end_p_Blob_array( _begin_p_Blob_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_Blob_array.
	 * @return mailbox to use to retrieve the result using _end_p_Blob_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_Blob_array(
		StrIntHashMap[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_Blob_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_Blob_array.
	 */
	public StrIntHashMap[] _end_p_Blob_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(StrIntHashMap[])
//				_vf.to_Blob(
//					StrIntHashMap[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_Blob_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Object p_object(
		Object a
	)
	{
		return
		_end_p_object( _begin_p_object(
			a
		) );
	}
	
	/**
	 * Begins the call to p_object.
	 * @return mailbox to use to retrieve the result using _end_p_object.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_object(
		Object a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_object.
	 */
	public Object _end_p_object( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Object)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Object[] p_object_array(
		Object[] a
	)
	{
		return
		_end_p_object_array( _begin_p_object_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_object_array.
	 * @return mailbox to use to retrieve the result using _end_p_object_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_object_array(
		Object[] a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_object_array.
	 */
	public Object[] _end_p_object_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Object[])
//				_vf.to_object(
//					Object[].class,
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_array,
						ValueFactoryTest._mf_result, 4000 )
//				)
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.S3 p_object_struct(
		etch.bindings.java.compiler.test.Test.S3 a
	)
	{
		return
		_end_p_object_struct( _begin_p_object_struct(
			a
		) );
	}
	
	/**
	 * Begins the call to p_object_struct.
	 * @return mailbox to use to retrieve the result using _end_p_object_struct.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_object_struct(
		etch.bindings.java.compiler.test.Test.S3 a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object_struct );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_object_struct.
	 */
	public etch.bindings.java.compiler.test.Test.S3 _end_p_object_struct( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.S3)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_struct,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public etch.bindings.java.compiler.test.Test.S4 p_object_struct_array(
		etch.bindings.java.compiler.test.Test.S4 a
	)
	{
		return
		_end_p_object_struct_array( _begin_p_object_struct_array(
			a
		) );
	}
	
	/**
	 * Begins the call to p_object_struct_array.
	 * @return mailbox to use to retrieve the result using _end_p_object_struct_array.
	 */
	public etch.bindings.java.support.Mailbox _begin_p_object_struct_array(
		etch.bindings.java.compiler.test.Test.S4 a
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_p_object_struct_array );
		_msg.put( ValueFactoryTest._mf_a, a );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_p_object_struct_array.
	 */
	public etch.bindings.java.compiler.test.Test.S4 _end_p_object_struct_array( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(etch.bindings.java.compiler.test.Test.S4)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_p_object_struct_array,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Integer alwaysWorks(
	)
	{
		return
		_end_alwaysWorks( _begin_alwaysWorks(
		) );
	}
	
	/**
	 * Begins the call to alwaysWorks.
	 * @return mailbox to use to retrieve the result using _end_alwaysWorks.
	 */
	public etch.bindings.java.support.Mailbox _begin_alwaysWorks(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_alwaysWorks );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_alwaysWorks.
	 */
	public Integer _end_alwaysWorks( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Integer)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_alwaysWorks,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean isTrue(
	)
	{
		return
		_end_isTrue( _begin_isTrue(
		) );
	}
	
	/**
	 * Begins the call to isTrue.
	 * @return mailbox to use to retrieve the result using _end_isTrue.
	 */
	public etch.bindings.java.support.Mailbox _begin_isTrue(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_isTrue );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_isTrue.
	 */
	public Boolean _end_isTrue( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_isTrue,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void alwaysFails(
	)
	{
		_end_alwaysFails( _begin_alwaysFails(
		) );
	}
	
	/**
	 * Begins the call to alwaysFails.
	 * @return mailbox to use to retrieve the result using _end_alwaysFails.
	 */
	public etch.bindings.java.support.Mailbox _begin_alwaysFails(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_alwaysFails );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_alwaysFails.
	 */
	public void _end_alwaysFails( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_alwaysFails,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean isFalse(
	)
	{
		return
		_end_isFalse( _begin_isFalse(
		) );
	}
	
	/**
	 * Begins the call to isFalse.
	 * @return mailbox to use to retrieve the result using _end_isFalse.
	 */
	public etch.bindings.java.support.Mailbox _begin_isFalse(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_isFalse );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_isFalse.
	 */
	public Boolean _end_isFalse( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_isFalse,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m1(
	)
	{
		_end_m1( _begin_m1(
		) );
	}
	
	/**
	 * Begins the call to m1.
	 * @return mailbox to use to retrieve the result using _end_m1.
	 */
	public etch.bindings.java.support.Mailbox _begin_m1(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m1 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m1.
	 */
	public void _end_m1( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m1,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m1(
	)
	{
		return
		_end_can_m1( _begin_can_m1(
		) );
	}
	
	/**
	 * Begins the call to can_m1.
	 * @return mailbox to use to retrieve the result using _end_can_m1.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m1(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m1 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m1.
	 */
	public Boolean _end_can_m1( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m1,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m2(
	)
	{
		_end_m2( _begin_m2(
		) );
	}
	
	/**
	 * Begins the call to m2.
	 * @return mailbox to use to retrieve the result using _end_m2.
	 */
	public etch.bindings.java.support.Mailbox _begin_m2(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m2 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m2.
	 */
	public void _end_m2( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m2,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m2(
		Boolean x
	)
	{
		return
		_end_can_m2( _begin_can_m2(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m2.
	 * @return mailbox to use to retrieve the result using _end_can_m2.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m2(
		Boolean x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m2 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m2.
	 */
	public Boolean _end_can_m2( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m2,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m3(
	)
	{
		_end_m3( _begin_m3(
		) );
	}
	
	/**
	 * Begins the call to m3.
	 * @return mailbox to use to retrieve the result using _end_m3.
	 */
	public etch.bindings.java.support.Mailbox _begin_m3(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m3 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m3.
	 */
	public void _end_m3( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m3,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m3(
		Boolean x
	)
	{
		return
		_end_can_m3( _begin_can_m3(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m3.
	 * @return mailbox to use to retrieve the result using _end_can_m3.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m3(
		Boolean x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m3 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m3.
	 */
	public Boolean _end_can_m3( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m3,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m4(
	)
	{
		_end_m4( _begin_m4(
		) );
	}
	
	/**
	 * Begins the call to m4.
	 * @return mailbox to use to retrieve the result using _end_m4.
	 */
	public etch.bindings.java.support.Mailbox _begin_m4(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m4 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m4.
	 */
	public void _end_m4( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m4,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m4(
		Boolean x
	)
	{
		return
		_end_can_m4( _begin_can_m4(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m4.
	 * @return mailbox to use to retrieve the result using _end_can_m4.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m4(
		Boolean x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m4 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m4.
	 */
	public Boolean _end_can_m4( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m4,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m5(
	)
	{
		_end_m5( _begin_m5(
		) );
	}
	
	/**
	 * Begins the call to m5.
	 * @return mailbox to use to retrieve the result using _end_m5.
	 */
	public etch.bindings.java.support.Mailbox _begin_m5(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m5 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m5.
	 */
	public void _end_m5( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m5,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m5(
		Byte x
	)
	{
		return
		_end_can_m5( _begin_can_m5(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m5.
	 * @return mailbox to use to retrieve the result using _end_can_m5.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m5(
		Byte x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m5 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m5.
	 */
	public Boolean _end_can_m5( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m5,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m6(
	)
	{
		_end_m6( _begin_m6(
		) );
	}
	
	/**
	 * Begins the call to m6.
	 * @return mailbox to use to retrieve the result using _end_m6.
	 */
	public etch.bindings.java.support.Mailbox _begin_m6(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m6 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m6.
	 */
	public void _end_m6( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m6,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m6(
		Short x
	)
	{
		return
		_end_can_m6( _begin_can_m6(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m6.
	 * @return mailbox to use to retrieve the result using _end_can_m6.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m6(
		Short x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m6 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m6.
	 */
	public Boolean _end_can_m6( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m6,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m7(
	)
	{
		_end_m7( _begin_m7(
		) );
	}
	
	/**
	 * Begins the call to m7.
	 * @return mailbox to use to retrieve the result using _end_m7.
	 */
	public etch.bindings.java.support.Mailbox _begin_m7(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m7 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m7.
	 */
	public void _end_m7( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m7,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m7(
		Integer x
	)
	{
		return
		_end_can_m7( _begin_can_m7(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m7.
	 * @return mailbox to use to retrieve the result using _end_can_m7.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m7(
		Integer x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m7 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m7.
	 */
	public Boolean _end_can_m7( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m7,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m8(
	)
	{
		_end_m8( _begin_m8(
		) );
	}
	
	/**
	 * Begins the call to m8.
	 * @return mailbox to use to retrieve the result using _end_m8.
	 */
	public etch.bindings.java.support.Mailbox _begin_m8(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m8 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m8.
	 */
	public void _end_m8( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m8,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m8(
		Long x
	)
	{
		return
		_end_can_m8( _begin_can_m8(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m8.
	 * @return mailbox to use to retrieve the result using _end_can_m8.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m8(
		Long x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m8 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m8.
	 */
	public Boolean _end_can_m8( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m8,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m9(
	)
	{
		_end_m9( _begin_m9(
		) );
	}
	
	/**
	 * Begins the call to m9.
	 * @return mailbox to use to retrieve the result using _end_m9.
	 */
	public etch.bindings.java.support.Mailbox _begin_m9(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m9 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m9.
	 */
	public void _end_m9( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m9,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m9(
		Float x
	)
	{
		return
		_end_can_m9( _begin_can_m9(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m9.
	 * @return mailbox to use to retrieve the result using _end_can_m9.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m9(
		Float x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m9 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m9.
	 */
	public Boolean _end_can_m9( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m9,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m10(
	)
	{
		_end_m10( _begin_m10(
		) );
	}
	
	/**
	 * Begins the call to m10.
	 * @return mailbox to use to retrieve the result using _end_m10.
	 */
	public etch.bindings.java.support.Mailbox _begin_m10(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m10 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m10.
	 */
	public void _end_m10( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m10,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m10(
		Double x
	)
	{
		return
		_end_can_m10( _begin_can_m10(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m10.
	 * @return mailbox to use to retrieve the result using _end_can_m10.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m10(
		Double x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m10 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m10.
	 */
	public Boolean _end_can_m10( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m10,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m11(
	)
	{
		_end_m11( _begin_m11(
		) );
	}
	
	/**
	 * Begins the call to m11.
	 * @return mailbox to use to retrieve the result using _end_m11.
	 */
	public etch.bindings.java.support.Mailbox _begin_m11(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m11 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m11.
	 */
	public void _end_m11( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m11,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m11(
		String x
	)
	{
		return
		_end_can_m11( _begin_can_m11(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m11.
	 * @return mailbox to use to retrieve the result using _end_can_m11.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m11(
		String x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m11 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m11.
	 */
	public Boolean _end_can_m11( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m11,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m12(
	)
	{
		_end_m12( _begin_m12(
		) );
	}
	
	/**
	 * Begins the call to m12.
	 * @return mailbox to use to retrieve the result using _end_m12.
	 */
	public etch.bindings.java.support.Mailbox _begin_m12(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m12 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m12.
	 */
	public void _end_m12( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m12,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m12(
		Integer x
	)
	{
		return
		_end_can_m12( _begin_can_m12(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m12.
	 * @return mailbox to use to retrieve the result using _end_can_m12.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m12(
		Integer x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m12 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m12.
	 */
	public Boolean _end_can_m12( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m12,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m13(
		Integer k
	)
	{
		_end_m13( _begin_m13(
			k
		) );
	}
	
	/**
	 * Begins the call to m13.
	 * @return mailbox to use to retrieve the result using _end_m13.
	 */
	public etch.bindings.java.support.Mailbox _begin_m13(
		Integer k
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m13 );
		_msg.put( ValueFactoryTest._mf_k, k );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m13.
	 */
	public void _end_m13( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m13,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m13(
		Integer x
	)
	{
		return
		_end_can_m13( _begin_can_m13(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m13.
	 * @return mailbox to use to retrieve the result using _end_can_m13.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m13(
		Integer x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m13 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m13.
	 */
	public Boolean _end_can_m13( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m13,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m14(
		etch.bindings.java.compiler.test.Test.S1 k
	)
	{
		_end_m14( _begin_m14(
			k
		) );
	}
	
	/**
	 * Begins the call to m14.
	 * @return mailbox to use to retrieve the result using _end_m14.
	 */
	public etch.bindings.java.support.Mailbox _begin_m14(
		etch.bindings.java.compiler.test.Test.S1 k
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m14 );
		_msg.put( ValueFactoryTest._mf_k, k );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m14.
	 */
	public void _end_m14( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m14,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m14(
		Integer x
	)
	{
		return
		_end_can_m14( _begin_can_m14(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m14.
	 * @return mailbox to use to retrieve the result using _end_can_m14.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m14(
		Integer x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m14 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m14.
	 */
	public Boolean _end_can_m14( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m14,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public void m15(
	)
	{
		_end_m15( _begin_m15(
		) );
	}
	
	/**
	 * Begins the call to m15.
	 * @return mailbox to use to retrieve the result using _end_m15.
	 */
	public etch.bindings.java.support.Mailbox _begin_m15(
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_m15 );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_m15.
	 */
	public void _end_m15( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			
			_svc.endvoidcall( _mb,
				ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_m15,
				ValueFactoryTest._mf_result, 4000 );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

	public Boolean can_m15(
		etch.bindings.java.compiler.test.Test.E1 x
	)
	{
		return
		_end_can_m15( _begin_can_m15(
			x
		) );
	}
	
	/**
	 * Begins the call to can_m15.
	 * @return mailbox to use to retrieve the result using _end_can_m15.
	 */
	public etch.bindings.java.support.Mailbox _begin_can_m15(
		etch.bindings.java.compiler.test.Test.E1 x
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test_can_m15 );
		_msg.put( ValueFactoryTest._mf_x, x );
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_can_m15.
	 */
	public Boolean _end_can_m15( etch.bindings.java.support.Mailbox _mb )
	{
		try
		{
			return
				(Boolean)
					_svc.endcall( _mb,
						ValueFactoryTest._mt_etch_bindings_java_compiler_test_Test__result_can_m15,
						ValueFactoryTest._mf_result, 4000 )
				;
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

}
