 // This file automatically generated by
 //  $version
 //  $now
#set($i = $intf.name())
package $intf.parent().name();


import metreos.util.URL;
#if ($helper.isServer($mc))
import etch.bindings.java.transport.Transport;
import $intf.parent().name().${i}Helper.${i}ServerFactory;
#else
#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
#if ($n.hasImport( $helper ))
import $n.getImport( $helper );
#end
#end
#end
#end


/**
#if ($helper.isServer($mc))
 * Main implementation for ${i}Listener.
#else
 * Main implementation for $i$suffix.
#end
 */
#if ($helper.isServer($mc))
public class Main${i}Listener implements ${i}ServerFactory
#else
public class Main$i$suffix implements ${i}Client
#end
{
	/**
#if ($helper.isServer($mc))
 	 * Main for ${i}Listener.
#else
	 * Main for $i$suffix
#end
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args)
		throws Exception
	{
		URL uri = new URL("tcp://0.0.0.0:4001");

#if ($helper.isServer($mc))
		Main${i}Listener implFactory = new Main${i}Listener();
		Transport listener = ${i}Helper.new${i}Listener( uri, null, implFactory );

		listener.transportControl( Transport.START_AND_WAIT_UP, 4000 );
#else
		Main${i}Client client = new Main${i}Client();
		Remote${i}Server server = ${i}Helper.new${i}Server( uri, null, client );

		server._startAndWaitUp( 4000 );

		// Insert Your Code Here
		//---------------------------------------------------------------------

		server._stopAndWaitDown( 4000 );
#end
	}

#if ($helper.isServer($mc))
	/**
	 * Constructs the Main${i}Listener.
	 */
	public Main${i}Listener()
	{
		// Nothing to do.
	}

	/**
	 * Return a new instance of ${i}Server.
	 * @param client
	 */
	public ${i}Server new${i}Server( ${i}Client client )
	{
		return new Impl${i}Server( client );
	}
#else
#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if ($n.isMsgDir($mc) || $n.isMsgDirBoth())
#if (!$n.isHidden())
	/**
#foreach( $s in $n.descr() )
	 * $s
#end
#foreach( $p in $n.iterator() )
#set($first = true)
#foreach( $s in $p.descr() )
#if ($first)
#set($first = false)
	 * @param $p.name() $s
#else
	 * $s
#end
#end
#end
#if ($n.hasReturn())
#set($first = true)
#foreach( $s in $n.returnDescr() )
#if ($first)
#set($first = false)
	 * @return $s
#else
	 * $s
#end
#end
#end
#foreach($t in $n.thrown().iterator())
#set($first = true)
#foreach( $s in $t.descr() )
#if ($first)
#set($first = false)
	 * @throws $t.name() $s
#else
	 * $s
#end
#end
#end
	 */
	public $helper.getTypeName( $n.type() ) $n.name()(
#set( $sep = "" )
#foreach( $p in $n.iterator() )
		$sep$helper.getTypeName( $p.type() ) $p.name()
#set( $sep = ", " )
#end
	)
#if ($n.hasThrown())
	throws
#set( $sep = "" )
#foreach($t in $n.thrown().iterator())
		$sep$t.name().name()
#set( $sep = ", " )
#end
#end
	{
#if (!$helper.getTypeName( $n.type() ).equals( "void" ))
		throw new UnsupportedOperationException();
#end
	}
#end
#end
#end
#end
#end
}
