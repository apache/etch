// This file automatically generated by:
//   $version
//   $now
#set($i = $intf.name())
#set($vfname = "ValueFactory$i")
#set($intfname = "$i$suffix")
#set($clname = "Remote$intfname")

package $intf.parent().name();

#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
#if ($n.hasImport( $helper ))
import $n.getImport( $helper );
#end
#end
#end

/**
 * Call to message translator for $intfname.
 */
@SuppressWarnings("unused")
#if ($hasBaseClass)
public class $clname extends Remote$i implements $intfname
#else
public class $clname extends etch.bindings.java.support.RemoteBase<$vfname> implements $intfname
#end
{
	/**
	 * Constructs the $clname.
	 *
	 * @param svc
	 */
	public $clname( etch.bindings.java.support.DeliveryService svc )
	{
		this( svc, new $vfname() );
	}

	/**
	 * Constructs the $clname.
	 *
	 * @param svc
	 * @param vf
	 */
	protected $clname( etch.bindings.java.support.DeliveryService svc, $vfname vf )
	{
		super( svc, vf );
	}

#foreach ($mthd in $intf.iterator())
#if ($mthd.isMsgDir($mc))
#if (!$mthd.isHidden())
#if ($mthd.isOneway())
	public $helper.getTypeName( $mthd.type() ) $mthd.name()(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
		$sep$helper.getTypeName( $param.type() ) $param.name()
#set( $sep = ", " )
#end
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( $vfname.$mthd.vname( $helper ) );
#foreach( $param in $mthd.iterator() )
		_msg.put( $vfname.$param.vname( $helper ), $param.name() );
#end
		try
		{
			_svc.send( _msg );
		}
		catch ( Exception _e )
		{
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}
#else
	public $helper.getTypeName( $mthd.type() ) $mthd.name()(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
		$sep$helper.getTypeName( $param.type() ) $param.name()
#set( $sep = ", " )
#end
	)
#if ($mthd.thrown().iterator().hasNext())
	throws
#set( $sep = "" )
#foreach($t in $mthd.thrown().iterator())
		$sep$t.name().name()
#set( $sep = ", " )
#end
#end
	{
#if ($mthd.hasReturn())
		return
#end
		_end_${mthd.name()}( _begin_${mthd.name()}(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
			$sep$param.name()
#set( $sep = ", " )
#end
		) );
	}
	
	/**
	 * Begins the call to ${mthd.name()}.
	 * @return mailbox to use to retrieve the result using _end_${mthd.name()}.
	 */
	public etch.bindings.java.support.Mailbox _begin_${mthd.name()}(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
		$sep$helper.getTypeName( $param.type() ) $param.name()
#set( $sep = ", " )
#end
	)
	{
		etch.bindings.java.msg.Message _msg = _newMessage( $vfname.$mthd.vname( $helper ) );
#foreach( $param in $mthd.iterator() )
		_msg.put( $vfname.$param.vname( $helper ), $param.name() );
#end
		return _svc.begincall( _msg );
	}
	
	/**
	 * Waits for the call to end and returns the result.
	 * @param _mb mailbox returned by _begin_${mthd.name()}.
	 */
	public $helper.getTypeName( $mthd.type() ) _end_${mthd.name()}( etch.bindings.java.support.Mailbox _mb )
#if ($mthd.thrown().iterator().hasNext())
		throws
#set( $sep = "" )
#foreach($t in $mthd.thrown().iterator())
			$sep$t.name().name()
#set( $sep = ", " )
#end
#end
	{
		try
		{
#if ($mthd.hasReturn())
			return
				($helper.getTypeName( $mthd.type() ))
#if ($mthd.type().dim() > 0)
//				_vf.to_$mthd.type().type()(
//					${helper.getTypeName( $mthd.type() )}.class,
#end
					_svc.endcall( _mb,
						$vfname.$mthd.getResultMessage().vname( $helper ),
						$vfname._mf_result, $mthd.getTimeout() )
#if ($mthd.type().dim() > 0)
//				)
#end
				;
#else
			
			_svc.endvoidcall( _mb,
				$vfname.$mthd.getResultMessage().vname( $helper ),
				$vfname._mf_result, $mthd.getTimeout() );
#end
		}
		catch ( Exception _e )
		{
#foreach($t in $mthd.thrown().iterator())
			if (_e instanceof $t.name()) throw ($t.name()) _e;
#end
			if (_e instanceof RuntimeException) throw (RuntimeException) _e;
			throw new RuntimeException( "unexpected exception from peer", _e );
		}
	}

#end
#end
#end
#end
}
