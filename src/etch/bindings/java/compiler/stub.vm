// This file automatically generated by:
//   $version
//   $now
#set($i = $intf.name())

package $intf.parent().name();

import etch.bindings.java.msg.Message;
import etch.bindings.java.support.MessageSource;
import etch.bindings.java.support.Pool;
import etch.bindings.java.support._Etch_AuthException;
import metreos.core.Who;
#if (!$hasBaseClass)
import etch.bindings.java.support.StubBase;
#end
import etch.bindings.java.support.Pool.PoolRunnable;
#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
#if ($n.hasImport( $helper ))
import $n.getImport( $helper );
#end
#end
#end

/**
 * Message to call translator for $i$suffix.
 */
@SuppressWarnings("unused")
#if ($hasBaseClass)
public class Stub$i$suffix extends Stub$i
#else
public class Stub$i$suffix extends StubBase
#end
{
	/**
	 * Stub for $i$suffix.
	 * @param src the source of messages.
	 * @param obj the implementation of $i$suffix responsive to requests.
	 * @param queued thread pool used to run AsyncReceiverMode.QUEUED methods.
	 * @param free thread pool used to run AsyncReceiverMode.FREE methods.
	 */
	public Stub$i$suffix( MessageSource src, $i$suffix obj, Pool queued, Pool free )
	{
		super( src, obj, queued, free );
		this._obj = obj;
	}
	
	@SuppressWarnings("unused")
	private final $i$suffix _obj;

	@Override
	public boolean message( final Who _sender, final Message _msg )
		throws Exception
	{
		if (_msg == null)
		{
			super.message( _sender, _msg );
			return true;
		}

		switch (_msg.type().getId())
		{
#foreach( $mthd in $intf.iterator() )
#if ($mthd.isMsgDir($mc))
#if (!$mthd.isHidden())
			case $mthd.id(): // ValueFactory$i.$mthd.vname( $helper )
#if ($mthd.isAsyncReceiver())
				_${helper.asyncReceiverPoolName( $mthd )}.run( new PoolRunnable() { public void run() throws Exception {
#end
				do_$mthd.name()( _sender, _msg );
#if ($mthd.isAsyncReceiver())
				} public void exception( Exception e ) { /* TODO */ } } );
#end
				return true;
#end
#end
#end
			default:
				return super.message( _sender, _msg );
		}
	}
#foreach( $mthd in $intf.iterator() )
#if ($mthd.isMsgDir($mc))
#if (!$mthd.isHidden())

	/**
	 * @param _sender
	 * @param _msg
	 * @throws Exception
	 */
	final void do_$mthd.name()( final Who _sender, final Message _msg )
		throws Exception
	{
		try
		{
#foreach ($param in $mthd.iterator())
			$helper.getTypeName( $param.type() ) $param.name() =
				($helper.getTypeName( $param.type() ))
#if ($param.type().dim() > 0)
//				ValueFactory${i}.to_$param.type().type()(
//					${helper.getTypeName( $param.type() )}.class,
#end
					_msg.get( ValueFactory$i.$param.vname( $helper ) )
#if ($param.type().dim() > 0)
//				)
#end
				;
#end

#if ($mthd.hasAuth())
#set( $auth = $mthd.getAuth() )
#if ($auth.isMethodFalse())
			if (true)
#else
			if (!_obj.${auth.method()}(
#set( $sep = "" )
#foreach($arg in $auth.args())
#if ($arg.isLiteralConstant())
				($helper.getNativeTypeName( $arg.type() )) $sep$helper.getTypeValue( $arg.type(), $arg.value() )
#elseif ($arg.isParameter( $mthd ))
				$sep$helper.qualifyParameterName( $arg.value() )
#elseif ($arg.isConstant( $intf ))
				$sep$helper.qualifyConstantName( $intf, $arg.value() )
#elseif ($arg.isEnum( $intf ))
				$sep$helper.qualifyEnumName( $intf, $arg.value() )
#else
				${sep}null
#end
#set( $sep = ", " )
#end
			))
#end
			throw new _Etch_AuthException( "stub could not authorize $mthd.name() using $auth.method()" );
#end
#if ($mthd.hasReturn())
			Object _result =
#end
			_obj.$mthd.name()(
#set( $sep = "" )
#foreach ($param in $mthd.iterator())
				$sep$param.name()
#set( $sep = ", " )
#end
			);
#if (!$mthd.isOneway())
#set($rmthd = $mthd.getResultMessage())

			Message _rmsg = _msg.reply( ValueFactory$i.$rmthd.vname( $helper ) );
#if ($mthd.hasReturn())
			_rmsg.put( ValueFactory$i._mf_result, _result );
#end
			_src.messagex( _sender, _rmsg );
#end
		}
		catch ( Exception e )
		{
#if (!$mthd.isOneway())
#set($rmthd = $mthd.getResultMessage())
			Message _rmsg = _msg.reply( ValueFactory$i.$rmthd.vname( $helper ) );
#else
			Message _rmsg = _msg.reply( ValueFactory$i._mt__exception );
#end
			_rmsg.put( ValueFactory$i._mf_result, e );
			_src.messagex( _sender, _rmsg );
		}
	}
#end
#end
#end
}
