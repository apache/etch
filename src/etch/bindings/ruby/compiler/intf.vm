# This file automatically generated by:
#   $version
#   $now

require 'etch/bindings/ruby/support/enum'
#if ($hasBaseClass)
require 'etch/bindings/ruby/idl/test/$intf.name()'
#end
#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
#if ($n.hasImport( $helper ))
require $n.getImport( $helper );
#end
#end
#end

#
#foreach( $s in $intf.descr() )
# $s
#end
#
#if ($hasBaseClass)
module $intf.name()$suffix 
	include $intf.name()
#else
module $intf.name()$suffix
#end

#foreach( $n in $intf.iterator() )
#if ($n.isMessage())
#if ($n.isMsgDir($mc))
#if (!$n.isHidden())
	#
#foreach( $s in $n.descr() )
	# $s
#end
#foreach( $p in $n.iterator() )
#set($first = true)
#foreach( $s in $p.descr() )
#if ($first)
#set($first = false)
	 # @param $p.name() $s
#else
	 # $s
#end
#end
#end
#if ($n.hasReturn())
#set($first = true)
#foreach( $s in $n.returnDescr() )
#if ($first)
#set($first = false)
	 # @return $s
#else
	 # $s
#end
#end
#end
#foreach($t in $n.thrown().iterator())
#set($first = true)
#foreach( $s in $t.descr() )
#if ($first)
#set($first = false)
	 # @throws $t.name() $s
#else
	 # $s
#end
#end
#end
	 #
	def $n.name()(#set( $sep = "" )#foreach( $p in $n.iterator() )$sep$p.name() #set( $sep = ", " )#end )
#if ($n.hasThrown())
	# throws
#set( $sep = "" )
#foreach($t in $n.thrown().iterator())
	#	$sep$t.name().name()
#set( $sep = ", " )
#end
#end
		raise "subclasser responsibility"
	end
#end
#end
#elseif ($n.isConstant())
#if (!$hasBaseClass)
	#
#foreach( $s in $n.descr() )
	# $s
#end
	#
	$n.name() = $helper.getTypeValue( $n.type(), $n.value() )

#end
#elseif ($n.isEnumx())
#if (!$hasBaseClass)
	#
#foreach( $s in $n.descr() )
	# $s
#end
	#
	class $n.name() < Enum
#set( $num = 1 ) 
#foreach( $i in $n.iterator() )
			$i.name() = ${n.name()}.new( :$i.name(), $num )
#set( $num = $num + 1 )			
#end
	end

#end
#elseif ($n.isExtern())
## ignore extern
#elseif ($n.isStruct() || $n.isExcept())
#if (!$hasBaseClass)
	#
#foreach( $s in $n.descr() )
	# $s
#end
	#
	class $n.name()#if( $n.isExcept() )	#if( $n.isUnchecked() )	< Exception	#else < Exception	#end
#end
	
#if ($n.hasParameters())
		
#end
		#
		# Constructs the $n.name().
#foreach( $i in $n.iterator() )
#set($first = true)
#foreach( $s in $i.descr() )
#if( $first )
#set($first = false)
		# @param $i.name() $s
#else
		# $s
#end
#end
#end
		#
		
		def initialize( *args )
			if (args != nil) 
			
				i = 0
#foreach( $i in $n.iterator() )
			
				@$i.name() = args[i]
				i += 1
#end
			end
		end

#if( $n.isExcept() )
		
		def message()
		
			return $helper.formatString( $n, true )
		end
#else
		
		def to_s
		
			return $helper.formatString( $n, false )
		end
#end

#foreach( $i in $n.iterator() )
		#
#foreach( $s in $i.descr() )
		# $s
#end
		#
		attr :$i.name(), true
#end
	end

#end
#else
	*** don't know what to do with $n ***
#end
#end
end
