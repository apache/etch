<?xml version="1.0" encoding="utf-8" ?>
<!--
// This file automatically generated by:
//   $version
//   $now 
-->
<module name="$intf.parent().name()">
#if ($intf.parent().descr().size() > 0)
	<description>$helper.emitXml($intf.parent().descr())</description>
#end
	<service name="$intf.name()">
#if ($intf.parent().descr().size() > 0)
		<description>$helper.protectCData($helper.emitXml($intf.descr()))</description>
#end
## iterate through externs, grouping them together
		<consts>
#foreach( $n in $intf.iterator() )
#if ($n.isConstant())
			<const name="$n.name()" type="$helper.getNativeTypeName( $n.type() )" value="$helper.protectAttr($helper.getTypeValue( $n.type(), $n.value() ))">
#if ($n.descr().size() > 0)
				<description>$helper.protectCData($helper.emitXml($n.descr()))</description>
#end
			</const>
#end
#end
		</consts>
## iterate through externs, grouping them together
		<externs>
#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
			<extern name="$n.name()" typeId="$n.id()" typeName="$n.fqname()">
#foreach ( $opt in $n.opts() )
				<externmap language="$opt.getLanguage().toString()" name="$opt.getXname().toString()" nImport="$opt.getXnameImport().toString()" serializer="$opt.getSerializer().toString()" sImport="$opt.getSerializerImport().toString()">	
				</externmap>
#end
#if ($n.descr().size() > 0)
				<description>$helper.protectCData($helper.emitXml($n.descr()))</description>
#end
			</extern>
#end
#end
		</externs>
## iterate through enums, grouping them together
		<enums>
#foreach( $n in $intf.iterator() )
#if ($n.isEnumx())
			<enum name="$n.name()" typeId="$n.id()" typeName="$n.fqname()">
#if ($n.descr().size() > 0)
				<description>$helper.protectCData($helper.emitXml($n.descr()))</description>
#end
#foreach( $param in $n.iterator() )
				<entry value="$param.name()" entryId="$param.id()" />
#end
			</enum>
#end
#end
		</enums>
## iterate through structures, grouping them together
		<structs>
#foreach( $n in $intf.iterator() )
#if ($n.isStruct())
			<struct name="$n.name()" typeId="$n.id()" typeName="$n.fqname()">
#if ($n.descr().size() > 0)
				<description>$helper.protectCData($helper.emitXml($n.descr()))</description>
#end
#foreach( $param in $n.iterator() )
				<field name="$param.name()" fieldId="$param.id()" fieldName="$param.fqname()" type="$param.type().type()" isArray="$param.type().isArray()" #if($param.type().isArray())dimension="$param.type().dim()"#end>
#if ($param.descr().size() > 0)
					<description>$helper.protectCData($helper.emitXml($param.descr()))</description>
#end
				</field>
#end
			</struct>
#end
#end
		</structs>

## iterate through exceptons, grouping them together		
		<exceptions>
#foreach( $n in $intf.iterator() )
#if ($n.isExcept())
			<exception name="$n.name()" isUnchecked="$n.isUnchecked()" typeId="$n.id()" typeName="$n.fqname()">
#if ($n.descr().size() > 0)
				<description>$helper.protectCData($helper.emitXml($n.descr()))</description>
#end
#foreach( $param in $n.iterator() )
				<field name="$param.name()" fieldId="$param.id()" fieldName="$param.fqname()" type="$param.type().type()" isArray="$param.type().isArray()" #if($param.type().isArray())dimension="$param.type().dim()"#end>
#if ($param.descr().size() > 0)
					<description>$helper.protectCData($helper.emitXml($param.descr()))</description>
#end
				</field>
#end
			</exception>
#end
#end
		</exceptions>
## iterate through messages, grouping them together		
		<methods>
#foreach( $n in $intf.iterator() )
#if ($n.isMessage() && !$n.isHidden())
			<method name="$n.name()" typeId="$n.id()" typeName="$n.fqname()" asyncReceiverMode="$n.getAsyncReceiver().toString().toLowerCase()" isOneway="$n.isOneway()" messageDirection="$n.getMessageDirection().toString().toLowerCase()" timeout="$n.getTimeout()">
#if ($n.descr().size() > 0)
				<description>$helper.protectCData($helper.emitXml($n.descr()))</description>
#end				
#if ($n.hasThrown())
#foreach( $thrownItem in $n.thrown().iterator() )
				<exception name="$thrownItem">
					<description>$helper.protectCData($helper.emitXml($thrownItem.descr()))</description>
				</exception>
#end
#end
#if ($n.hasAuth())
				<authorize methodName="$n.getAuth().method()">
#foreach( $authArg in $n.getAuth().args() )
					<argument name="$authArg.value()" />
#end
				</authorize>
#end
#foreach( $param in $n.iterator() )
				<field name="$param.name()" fieldId="$param.id()" fieldName="$param.fqname()" type="$param.type().type()" isArray="$param.type().isArray()" #if($param.type().isArray())dimension="$param.type().dim()"#end>
#if ($param.descr().size() > 0)
					<description>$helper.protectCData($helper.emitXml($param.descr()))</description>
#end
				</field>
#end
				<result #if (!$n.isOneway())fieldId="$n.getResultMessage().id()" fieldName="$n.getResultMessage().fqname()"#end type="$n.type().type()"  isArray="$n.type().isArray()" #if($n.type().isArray())dimension="$n.type().dim()"#end>
#if ($n.returnDescr().size() > 0)
					<description>$helper.protectCData($helper.emitXml($n.returnDescr()))</description>
#end
				</result>
			</method>
#end
#end
		</methods>
## iterate over raw messages, and define them all here

</service>
</module>


