$(OutDir)\$(ProjectName).lib

This is Bob Jenkins' in-memory hash table from burtleburtle.net/bob/hash/hashtab.html.
The author, Bob Jenkins, has placed this code in the public domain, 
He states as such on his site, and in comments in the code itself, viz:
"I offer you a new hash function for hash table lookup that is faster and more thorough 
than the one you are using now. I also give you a way to verify that it is more thorough. 
The code given here are all public domain (sic)." 

In the process of integrating Jenkins' code I (j decocq, cisco systems) made these changes:
- renamed files belonging to this subproject to begin with "jenk".
- changed name of unique.c to jenktest.c; changed this to read from file not stdin
- added includes to .c files such that they compile individually.
- verified that the code works with unicode support enabled.
- other tweaks as needed.

BEGIN JENKINS' COMMENTS ON THE CODE
hashtab.h and hashtab.c form the hash table module. 
The files before those are the support files that I always use. 
The file after it (unique.c) is an example of how to use the hash table. 
(The program UNIQUE takes a file in STDIN and dumps the unique lines 
(duplicates removed) to STDOUT. 
It also shuffles the unique lines pseudorandomly. 
The sample input provided doesn't have any duplicate lines, 
so the output should be the same size as the input, but the lines will be shuffled.) 

The hash table has a fixed hash function, and its size is a power of two. 
It doubles in size when it needs to, and when it doubles, it doubles all at once. 
It never shrinks. Input keys and data are pointed to, not copied. 
Keys are unique. Collisions are handled by chaining. 

Functions are: 
hcreate  - create a hash table 
hdestroy - destroy a hash table 
hcount   - how many items are in the hash table? 
hkey     - the key at the current position 
hkeyl    - the length of the key at the current position 
hstuff   - the other data at the current position 
hfind    - position the hash table at some key 
hadd     - add a new <key,stuff> pair to the table 
hdel     - delete the item at the current position 
hfirst   - position at the first item in the table 
hnext    - move to the next item in the table 
hstat    - print statistics about this table 

The most unusual thing about this module is that it maintains a current position. 
This means you can't have a dangling pointer into it. 
If you position on something, and then delete it, the position moves to another item. 
On the other hand, it also means it's hard to do nested loops over all the items in the table, 
since there can be only one position at a time. 
END JENKINS' COMMENTS ON THE CODE

