// This file automatically generated by:
//   $version
//   $now
#set($i = $intf.name())
#set($vfname = "ValueFactory$i")
#set($intfname = "$i$suffix")
#set($clname = "Remote$intfname")

namespace $intf.parent().name()
{

using System;

#if (!$hasBaseClass)
#end
#foreach( $n in $intf.iterator() )
#if ($n.isExtern())
#if ($n.hasImport( $helper ))
using $n.getImport( $helper );
#end
#end
#end

///
/// <summary>Call to message translator for $intfname.</summary>
///
#if ($hasBaseClass)
public class $clname : Remote$i, $intfname
#else
public class $clname : Etch.Support.RemoteBase<$vfname>, $intfname
#end
{
	///
	/// <summary>Constructs the $clname.</summary>
	///
	/// <param name="svc"></param>
	///
	public $clname( Etch.Support.DeliveryService svc ) : this( svc, new $vfname() )
	{
		
	}

	///
	/// <summary>Constructs the $clname.</summary>
	///
	/// <param name="svc"></param>
	/// <param name="vf"></param>
	///
	protected $clname( Etch.Support.DeliveryService svc, $vfname vf ) : base( svc, vf )
	{
		
	}

#foreach ($mthd in $intf.iterator())
#if ($mthd.isMsgDir($mc))
#if (!$mthd.isHidden())
#if ($mthd.isOneway())
	public $helper.getTypeName( $mthd.type() ) $mthd.name()(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
		$sep$helper.getTypeName( $param.type() ) $param.name()
#set( $sep = ", " )
#end
	)
	{
		Etch.Msg.Message _msg = _NewMessage( $vfname.$mthd.vname( $helper ) );
#foreach( $param in $mthd.iterator() )
		_msg.Add( $vfname.$param.vname( $helper ), $param.name() );
#end
		try
		{
			_svc.Send( _msg );
		}
		catch ( Exception _e )
		{
			throw new Exception( "unexpected", _e );
		}
	}
#else
	public $helper.getTypeName( $mthd.type() ) $mthd.name()(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
		$sep$helper.getTypeName( $param.type() ) $param.name()
#set( $sep = ", " )
#end
	)
#if ($mthd.thrown().iterator().hasNext())
	//throws
#set( $sep = "" )
#foreach($t in $mthd.thrown().iterator())
	//	$sep$t.name().name()
#set( $sep = ", " )
#end
#end
	{
#if ($mthd.hasReturn())
		return
#end
		_end_${mthd.name()}( _begin_${mthd.name()}(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
			$sep$param.name()
#set( $sep = ", " )
#end
		) );
	}
	
	///
	/// <summary>Begins the call to ${mthd.name()}.</summary>
	///	<returns>mailbox to use to retrieve the result using _end_${mthd.name()}.</returns>
	///
	public Etch.Support.Mailbox _begin_${mthd.name()}(
#set( $sep = "" )
#foreach( $param in $mthd.iterator() )
		$sep$helper.getTypeName( $param.type() ) $param.name()
#set( $sep = ", " )
#end
	)
	{
		Etch.Msg.Message _msg = _NewMessage( $vfname.$mthd.vname( $helper ) );
#foreach( $param in $mthd.iterator() )
		_msg.Add( $vfname.$param.vname( $helper ), $param.name() );
#end
		return _svc.BeginCall( _msg );
	}
	
	/// 
	/// <summary>Waits for the call to end and returns the result.</summary>
	/// <param name="_mb">mailbox returned by _begin_${mthd.name()}.</param>
	///
	public $helper.getTypeName( $mthd.type() ) _end_${mthd.name()}( Etch.Support.Mailbox _mb )
#if ($mthd.thrown().iterator().hasNext())
		//throws
#set( $sep = "" )
#foreach($t in $mthd.thrown().iterator())
		//	$sep$t.name().name()
#set( $sep = ", " )
#end
#end
	{
		try
		{
#if ($mthd.hasReturn())
			return
				($helper.getTypeName( $mthd.type() ))
#if ($mthd.type().dim() > 0)
				// ValueFactory${i}.to_$mthd.type().type()(
				//	typeof( ${helper.getTypeName( $mthd.type() )} ),
#end
					_svc.EndCall( _mb,
						$vfname.$mthd.getResultMessage().vname( $helper ),
						$vfname._mf_result, $mthd.getTimeout() )
#if ($mthd.type().dim() > 0)
				//)
#end
				;
#else
			
			_svc.EndCall( _mb,
				$vfname.$mthd.getResultMessage().vname( $helper ),
				$vfname._mf_result, $mthd.getTimeout() );
#end
		}
		catch ( Exception _e )
		{
#foreach($t in $mthd.thrown().iterator())
#set( $tname = $t.getNamed().efqname($helper) )
			if (_e.GetType() == typeof($tname)) throw ($tname) _e;
#end
			throw new Exception( "unexpected", _e );
		}
	}

#end
#end
#end
#end
}

}