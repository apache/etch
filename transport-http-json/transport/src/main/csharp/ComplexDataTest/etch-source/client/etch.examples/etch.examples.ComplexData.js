// This file automatically generated by:
//   Etch 1.0.1 (LOCAL-0) / javascript 1.0.1 (LOCAL-0)
//   Mon Aug 11 09:47:47 CDT 2008

// Include this generated library into your web page
// It is not recommended that you change this file.
new function()
{
	// define the namespace of this service
	var rootNamespace = "etch.examples";

	// create the namespace in non-obtrusive fashion using namespacer()
	var rootNamespaceParent = namespacer(rootNamespace);
	
	// find all sub-namespaces, and create them

	// creates the specified namespace, by creating objects for each name
	// and associating them in a hierarchy.
	function namespacer(namespace)
	{
		var nsBits = namespace.split(".");

		var base = window;

		for(var i = 0; i < nsBits.length; i++)
		{	
			base = createNamespace(base, nsBits[i]);		
		}	
		
		return base;
	}

	function createNamespace(base, nsBit)
	{	

		// If no one has yet created this name, let's go ahead and create it for ourselves as an empty object.
		if(base[nsBit] == null)
		{
			base[nsBit] = {};
		}	

		// someone must have already made it--that's actually OK, as long as the already-constructed type
		// is an object.  Otherwise there isn't much we can do to carry on.
		else if(typeof base[nsBit] != 'object')
		{
			throw "Namespace collision on " + nsBit;
		}
	
		return base[nsBit];
	}

	var ComplexData = function ComplexData() 
	{
		var that = this;
		
		try
		{
			this.transport = new etch.poc.Transport(this);
		}
		catch(err)
		{
			// most likely error is Etch Transport library is not included
			throw "Include the Etch transport library in the web page.";
		}
		
		// define callbacks specific to this service.	The assumption is that
		// developers will override these callbacks.
		
		// TODO: avoid name collisions
	}
	
	ComplexData.prototype.callbacks = {};
	ComplexData.prototype.parametizer = {};
	ComplexData.prototype.definitions = {};

	// Establish callback methods.  These are invoked by the parametizer.
	ComplexData.prototype.callbacks.sendObject = function( value ) {};

	ComplexData.prototype.callbacks.receiveObject = function(  ) {};

	ComplexData.prototype.callbacks.sendBoolean = function( value ) {};

	ComplexData.prototype.callbacks.receiveBoolean = function(  ) {};

	ComplexData.prototype.callbacks.sendByte = function( value ) {};

	ComplexData.prototype.callbacks.receiveByte = function(  ) {};

	ComplexData.prototype.callbacks.sendShort = function( value ) {};

	ComplexData.prototype.callbacks.receiveShort = function(  ) {};

	ComplexData.prototype.callbacks.sendInt = function( value ) {};

	ComplexData.prototype.callbacks.receiveInt = function(  ) {};

	ComplexData.prototype.callbacks.sendLong = function( value ) {};

	ComplexData.prototype.callbacks.receiveLong = function(  ) {};

	ComplexData.prototype.callbacks.sendDouble = function( value ) {};

	ComplexData.prototype.callbacks.receiveDouble = function(  ) {};

	ComplexData.prototype.callbacks.sendFloat = function( value ) {};

	ComplexData.prototype.callbacks.receiveFloat = function(  ) {};

	ComplexData.prototype.callbacks.sendString = function( value ) {};

	ComplexData.prototype.callbacks.receiveString = function(  ) {};

	ComplexData.prototype.callbacks.sendDatetime = function( value ) {};

	ComplexData.prototype.callbacks.receiveDatetime = function(  ) {};

	ComplexData.prototype.callbacks.sendMap = function( value ) {};

	ComplexData.prototype.callbacks.receiveMap = function(  ) {};

	ComplexData.prototype.callbacks.sendException = function(  ) {};

	ComplexData.prototype.callbacks.sendObjectArray = function( values ) {};

	ComplexData.prototype.callbacks.receiveObjectArray = function(  ) {};

	ComplexData.prototype.callbacks.sendStringArray = function( values ) {};

	ComplexData.prototype.callbacks.receiveStringArray = function(  ) {};

	ComplexData.prototype.callbacks.sendBaseArray = function( values ) {};

	ComplexData.prototype.callbacks.receiveBaseArray = function(  ) {};

	ComplexData.prototype.callbacks.sendDerivedArray = function( values ) {};

	ComplexData.prototype.callbacks.receiveDerivedArray = function(  ) {};

	ComplexData.prototype.callbacks.sendList = function( values ) {};

	ComplexData.prototype.callbacks.receiveList = function(  ) {};



	// Establish parametizer methods.  These take a JSON object, and split out each argument for a given method from that JSON object
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendObject"] = function(that, args) {
		return that.callbacks.sendObject( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveObject"] = function(that, args) {
		return that.callbacks.receiveObject( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendBoolean"] = function(that, args) {
		return that.callbacks.sendBoolean( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveBoolean"] = function(that, args) {
		return that.callbacks.receiveBoolean( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendByte"] = function(that, args) {
		return that.callbacks.sendByte( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveByte"] = function(that, args) {
		return that.callbacks.receiveByte( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendShort"] = function(that, args) {
		return that.callbacks.sendShort( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveShort"] = function(that, args) {
		return that.callbacks.receiveShort( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendInt"] = function(that, args) {
		return that.callbacks.sendInt( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveInt"] = function(that, args) {
		return that.callbacks.receiveInt( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendLong"] = function(that, args) {
		return that.callbacks.sendLong( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveLong"] = function(that, args) {
		return that.callbacks.receiveLong( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendDouble"] = function(that, args) {
		return that.callbacks.sendDouble( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveDouble"] = function(that, args) {
		return that.callbacks.receiveDouble( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendFloat"] = function(that, args) {
		return that.callbacks.sendFloat( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveFloat"] = function(that, args) {
		return that.callbacks.receiveFloat( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendString"] = function(that, args) {
		return that.callbacks.sendString( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveString"] = function(that, args) {
		return that.callbacks.receiveString( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendDatetime"] = function(that, args) {
		return that.callbacks.sendDatetime( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveDatetime"] = function(that, args) {
		return that.callbacks.receiveDatetime( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendMap"] = function(that, args) {
		return that.callbacks.sendMap( args.value ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveMap"] = function(that, args) {
		return that.callbacks.receiveMap( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendException"] = function(that, args) {
		return that.callbacks.sendException( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendObjectArray"] = function(that, args) {
		return that.callbacks.sendObjectArray( args.values ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveObjectArray"] = function(that, args) {
		return that.callbacks.receiveObjectArray( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendStringArray"] = function(that, args) {
		return that.callbacks.sendStringArray( args.values ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveStringArray"] = function(that, args) {
		return that.callbacks.receiveStringArray( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendBaseArray"] = function(that, args) {
		return that.callbacks.sendBaseArray( args.values ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveBaseArray"] = function(that, args) {
		return that.callbacks.receiveBaseArray( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendDerivedArray"] = function(that, args) {
		return that.callbacks.sendDerivedArray( args.values ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveDerivedArray"] = function(that, args) {
		return that.callbacks.receiveDerivedArray( ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.sendList"] = function(that, args) {
		return that.callbacks.sendList( args.values ); 
	}
	ComplexData.prototype.parametizer["etch.examples.ComplexData.receiveList"] = function(that, args) {
		return that.callbacks.receiveList( ); 
	}


	// Establish additional metadata for methods.  Currently, only callbacks are qualified with their 'onewayness'
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendObject"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveObject"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendBoolean"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveBoolean"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendByte"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveByte"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendShort"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveShort"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendInt"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveInt"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendLong"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveLong"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendDouble"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveDouble"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendFloat"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveFloat"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendString"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveString"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendDatetime"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveDatetime"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendMap"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveMap"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendException"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendObjectArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveObjectArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendStringArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveStringArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendBaseArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveBaseArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendDerivedArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveDerivedArray"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.sendList"] = { isOneway: false };
	ComplexData.prototype.definitions["etch.examples.ComplexData.receiveList"] = { isOneway: false };


	/* Initialize the service and underlying transport */
	ComplexData.prototype.init = function(host)
	{
		this.transport.init(host);
	}
	
	/* Connect to the server, establishing the Etch session */
	ComplexData.prototype.connect = function(args)
	{
		this.transport.connect(args);
	}
	
	/* Stop the transport */
	ComplexData.prototype.stop = function()
	{
		this.transport.stop();
	}
	
	// server-directed methods specific to the ComplexData service 
	ComplexData.prototype.sendObject = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendObject",
			args,
			5000); 
	}

	ComplexData.prototype.receiveObject = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveObject",
			args,
			5000); 
	}

	ComplexData.prototype.sendBoolean = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendBoolean",
			args,
			5000); 
	}

	ComplexData.prototype.receiveBoolean = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveBoolean",
			args,
			5000); 
	}

	ComplexData.prototype.sendByte = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendByte",
			args,
			5000); 
	}

	ComplexData.prototype.receiveByte = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveByte",
			args,
			5000); 
	}

	ComplexData.prototype.sendShort = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendShort",
			args,
			5000); 
	}

	ComplexData.prototype.receiveShort = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveShort",
			args,
			5000); 
	}

	ComplexData.prototype.sendInt = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendInt",
			args,
			5000); 
	}

	ComplexData.prototype.receiveInt = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveInt",
			args,
			5000); 
	}

	ComplexData.prototype.sendLong = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendLong",
			args,
			5000); 
	}

	ComplexData.prototype.receiveLong = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveLong",
			args,
			5000); 
	}

	ComplexData.prototype.sendDouble = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendDouble",
			args,
			5000); 
	}

	ComplexData.prototype.receiveDouble = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveDouble",
			args,
			5000); 
	}

	ComplexData.prototype.sendFloat = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendFloat",
			args,
			5000); 
	}

	ComplexData.prototype.receiveFloat = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveFloat",
			args,
			5000); 
	}

	ComplexData.prototype.sendString = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendString",
			args,
			5000); 
	}

	ComplexData.prototype.receiveString = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveString",
			args,
			5000); 
	}

	ComplexData.prototype.sendDatetime = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendDatetime",
			args,
			5000); 
	}

	ComplexData.prototype.receiveDatetime = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveDatetime",
			args,
			5000); 
	}

	ComplexData.prototype.sendMap = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendMap",
			args,
			5000); 
	}

	ComplexData.prototype.receiveMap = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveMap",
			args,
			5000); 
	}

	ComplexData.prototype.sendException = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendException",
			args,
			5000); 
	}

	ComplexData.prototype.sendObjectArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendObjectArray",
			args,
			5000); 
	}

	ComplexData.prototype.receiveObjectArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveObjectArray",
			args,
			5000); 
	}

	ComplexData.prototype.sendStringArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendStringArray",
			args,
			5000); 
	}

	ComplexData.prototype.receiveStringArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveStringArray",
			args,
			5000); 
	}

	ComplexData.prototype.sendBaseArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendBaseArray",
			args,
			5000); 
	}

	ComplexData.prototype.receiveBaseArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveBaseArray",
			args,
			5000); 
	}

	ComplexData.prototype.sendDerivedArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendDerivedArray",
			args,
			5000); 
	}

	ComplexData.prototype.receiveDerivedArray = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveDerivedArray",
			args,
			5000); 
	}

	ComplexData.prototype.sendList = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.sendList",
			args,
			5000); 
	}

	ComplexData.prototype.receiveList = function(args) 
	{
		this.transport.twowayToServer(
			"etch.examples.ComplexData.receiveList",
			args,
			5000); 
	}

	
			
	// complex type definitions

	ComplexData.CustomException = function CustomException() 
	{
		this["@type"] = "etch.examples.ComplexData.CustomException";
		
		this.setProperties(arguments);
	}
	ComplexData.CustomException.prototype = new etch.poc.BasePrototype;
	ComplexData.CustomException.prototype.constructor = ComplexData.CustomException;
	ComplexData.CustomException.prototype.value = null;
	etch.poc.TypeMap["etch.examples.ComplexData.CustomException"] = ComplexData.CustomException.prototype.constructor;

	ComplexData.A = function A() 
	{
		this["@type"] = "etch.examples.ComplexData.A";
		
		this.setProperties(arguments);
	}
	ComplexData.A.prototype = new etch.poc.BasePrototype;
	ComplexData.A.prototype.constructor = ComplexData.A;
	ComplexData.A.prototype.value = null;
	ComplexData.A.prototype.value2 = null;
	etch.poc.TypeMap["etch.examples.ComplexData.A"] = ComplexData.A.prototype.constructor;

	ComplexData.B = function B() 
	{
		this["@type"] = "etch.examples.ComplexData.B";
		
		this.setProperties(arguments);
	}
	ComplexData.B.prototype = new etch.poc.BasePrototype;
	ComplexData.B.prototype.constructor = ComplexData.B;
	ComplexData.B.prototype.value = null;
	ComplexData.B.prototype.vaule3 = null;
	etch.poc.TypeMap["etch.examples.ComplexData.B"] = ComplexData.B.prototype.constructor;

	ComplexData.BaseA = function BaseA() 
	{
		this["@type"] = "etch.examples.ComplexData.BaseA";
		
		this.setProperties(arguments);
	}
	ComplexData.BaseA.prototype = new etch.poc.BasePrototype;
	ComplexData.BaseA.prototype.constructor = ComplexData.BaseA;
	ComplexData.BaseA.prototype.a = null;
	etch.poc.TypeMap["etch.examples.ComplexData.BaseA"] = ComplexData.BaseA.prototype.constructor;

	ComplexData.BaseB = function BaseB() 
	{
		this["@type"] = "etch.examples.ComplexData.BaseB";
		
		this.setProperties(arguments);
	}
	ComplexData.BaseB.prototype = new ComplexData.BaseA;
	ComplexData.BaseB.prototype.constructor = ComplexData.BaseB;
	ComplexData.BaseB.prototype.b = null;
	etch.poc.TypeMap["etch.examples.ComplexData.BaseB"] = ComplexData.BaseB.prototype.constructor;

	ComplexData.BaseC = function BaseC() 
	{
		this["@type"] = "etch.examples.ComplexData.BaseC";
		
		this.setProperties(arguments);
	}
	ComplexData.BaseC.prototype = new ComplexData.BaseA;
	ComplexData.BaseC.prototype.constructor = ComplexData.BaseC;
	ComplexData.BaseC.prototype.c = null;
	etch.poc.TypeMap["etch.examples.ComplexData.BaseC"] = ComplexData.BaseC.prototype.constructor;




	// assign the constructed service to it's namespace...
	rootNamespaceParent.ComplexData = ComplexData;
}
