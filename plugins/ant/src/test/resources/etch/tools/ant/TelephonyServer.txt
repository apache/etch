///////////////////////////////////////////////
// Telephony Server
///////////////////////////////////////////////

/**
 * Exception related to telephony server.
 * @param msg the detail of the exception.
 */
exception TelephonyServerException(string msg);

enum TelephonyServerType
(
	H323_GATEWAY,
	COMMUNICATION_MANAGER,
	CISCO_SIP_DOMAIN,
	IETF_SIP_DOMAIN
)

struct TelephonyServer
(
	/* the unique id of the telephony server */
	string	id,
	
	/* the name of the telephony server */
	string	name,
	
	/* short description of the telephony server */
	string description,
	
	/* type of this server */
	TelephonyServerType 	type
)

struct SipDomain
(
	/** common telephony server header info for sip domain **/
	TelephonyServer		ts,
	
	/** primary registrar for the sip domain, it should be a valid ip address **/
	string				registrar,
	
	/** secondary registrar for the sip domain, it should be a valid ip address **/
	string				backupRegistrar,
	
	/** boutbound proxy server for the sip domain, it should be a valid ip address **/
	string				proxy
)

/**
 * Retrieves all the telephony servers from database.  There are four
 * differet kinds defined: H323 Gateway, Commucation Manager Cluster,
 * Cisco Sip Domain, and IETF based Sip Domain.
 *
 * @return all the telephony servers defined in database.
 * @throws TelephonyServerException if there is an error.
 *
 */
TelephonyServer[] listTelephonyServers() throws TelephonyServerException;

/**
 * Retrieves all the sip domains from database.
 *
 * @return all the sip domains defined in database.
 * @throws TelephonyServerException if there is an error.
 *
 */
SipDomain[] listSipDomains() throws TelephonyServerException;

/**
 * Retrieves the sip domain given the id.
 *
 * @param id the id of the sip domain to be retrieved.
 *
 * @return the sip domain object.
 *
 * @throws TelephonyServerException if there is an error.
 */
SipDomain getSipDomain(string id) throws TelephonyServerException;


/**
 *	Adds a sip domain into database.
 *
 * @param sd sip domain object to be added.
 *
 * @return the sip domain object with id populated.
 *
 * @throws TelephonyServerException if there is an error.
 */
SipDomain addSipDomain(SipDomain sd) throws TelephonyServerException;

/**
 *	Deletes a sip domain from database.
 *
 * @param id the id of the sip domain to be deleted.
 *
 * @throws TelephonyServerException if there is an error.
 */
void deleteSipDomain(string id) throws TelephonyServerException;

/**
 *	Updates a sip domain in database based on current state in the passed object.
 *
 * @param id the id of the sip domain to be updated.
 * @param sd the new sip domain information.
 *
 * @throws TelephonyServerException if there is an error.
 */
void updateSipDomain(string id, SipDomain sd) throws TelephonyServerException;


struct SipDevicePool 
(
	/** id of the device pool */
	string		id,
	/** name of the device pool */
	string		name,
	/** user name associated with the device pool */
	string		userName,
	/** password for the device pool */
	string		password,
	/** proxy for the device pool */
	string		proxy
)

/**
 * Count the number of sip device pools in database.
 *
 * @return the number of the sip device pools.
 *
 * @throws TelephonyServerException if there is any error.
 */
int countSipDevicePool() throws TelephonyServerException;

/**
 * List all the sip device pools in the database.
 *
 * @return all the device pools in the system.
 *
 * @throws TelephonyServerException if there is any error.
 */
SipDevicePool[] listSipDevicePool() throws TelephonyServerException;

/**
 * Add a sip device pool into database.
 *
 * @param sdp the sip device pool to be added.
 * 
 * @return the sip device pool with id populated.
 *	
 * @throws TelephonyServerException if there is any error.
 *
 */
SipDevicePool	addSipDevicePool(SipDevicePool sdp) throws TelephonyServerException;


/**
 * Delete a sip device pool from database.
 *
 * @param id the id of the device pool to be deleted.
 *
 * @throws TelephonyServerException if there is any error.
 *
 */
void deleteSipDevicePool(string id) throws TelephonyServerException;

/**
 * Update a sip device pool with the given id.
 *
 * @param id the id of the device pool to be updated.
 * @param sdp the sip device pool to be added.
 *
 * @throws TelephonyServerException if there is any error.
 *
 */
void updateSipDevicePool(string id, SipDevicePool sdp) throws TelephonyServerException;

///////////////////////////////////////////////
// H.323 Gateway
///////////////////////////////////////////////

struct H323Gateway (
	/** Shared fields from telephony server */
	TelephonyServer ts,
	/** The IP Address of this H.323 Gateway */
	string ipAddress
)

/**
 * Counts the number of H.323 Gateways.
 * @return the number of H.323 Gateways.
 * @throws AppException
 */
int countH323Gateways() throws AppException

/**
 * Gets a list of all the H.323 Gateways.
 * @param offset the offset of the first item to return.
 * @param count The count of items to return.
 * @return the info for each H.323 Gateway. If the number of items
 * is < count, then the list is complete. If the number of items
 * == count, then there might be more items starting at offset + count.
 * @throws AppException
 */
H323Gateway [] listH323Gateways( int offset, int count ) throws AppException

/**
 * Gets the info for the specified H.323 Gateway.
 * @param h323GatewayId the unique id of the H.323 Gateway.
 * @return the info of the H.323 Gateway or null.
 * @throws AppException
 */
H323Gateway getH323Gateway( string h323GatewayId ) throws AppException

/**
 * Adds the H.323 Gateway from the supplied info.
 * @param gateway the info for the new H.323 Gateway. 
 * @return the updated H.323 Gateway info, with all fields set.
 * @throws AppException
 */
H323Gateway addH323Gateway( H323Gateway gateway ) throws AppException

/**
 * Updates all fields for this H.323 Gateway.
 * @param gateway the updated H.323 Gateway.
 * @throws AppException
 */
void updateH323Gateway( H323Gateway gateway ) throws AppException

/**
 * Deletes the specified H.323 Gateway.
 * @param h323GatewayId the unique id of the H.323 Gateway.
 * @throws AppException
 */
void deleteH323Gateway( string h323GatewayId ) throws AppException

///////////////////////////////////////////////
// CUCM Cluster
///////////////////////////////////////////////
enum CucmClusterVersionType
(
	CUCM_VERSION_3_3,
	CUCM_VERSION_4_0,
	CUCM_VERSION_4_1,
	CUCM_VERSION_4_2,
	CUCM_VERSION_5_0,
	CUCM_VERSION_5_1,
	CUCM_VERSION_6_0
)


struct CucmCluster (
	/** Shared fields from telephony server */
	TelephonyServer ts,
	/** The version of this CUCM Cluster */
	CucmClusterVersionType version,
	/** The IP Address of this CUCM Cluster */
	string ipAddress,
	/** The username of this CUCM Cluster */
	string username,
	/** The password of this CUCM Cluster */
	string password,
	/** The SNMP Community of this CUCM Cluster */
	string snmpCommunity
)

/**
 * Counts the number of CUCM Clusters
 * @return the number of CUCM Clusters
 * @throws AppException
 */
int countCucmClusters() throws AppException

/**
 * Gets a list of all the CUCM Clusters
 * @param offset the offset of the first item to return.
 * @param count The count of items to return.
 * @return the info for each CUCM Cluster. If the number of items
 * is < count, then the list is complete. If the number of items
 * == count, then there might be more items starting at offset + count.
 * @throws AppException
 */
CucmCluster [] listCucmClusters( int offset, int count ) throws AppException

/**
 * Gets the info for the specified CUCM Cluster
 * @param id the unique id of the CUCM Cluster.
 * @return the info of the CUCM Cluster or null.
 * @throws AppException
 */
CucmCluster getCucmCluster( string id ) throws AppException

/**
 * Adds the CUCM Cluster from the supplied info.
 * @param cluster the info for the new CUCM Cluster. 
 * @return the updated CUCM Cluster info, with all fields set.
 * @throws AppException
 */
CucmCluster addCucmCluster( CucmCluster cluster ) throws AppException

/**
 * Updates all fields for this CUCM Cluster.  If the password is null
 * it will not be updated
 * @param cluster the updated CUCM Cluster.
 * @throws AppException
 */
void updateCucmCluster( CucmCluster cluster ) throws AppException

/**
 * Deletes the specified CUCM Cluster.
 * @param id the unique id of the CUCM Cluster.
 * @throws AppException
 */
void deleteCucmCluster( string id ) throws AppException

///////////////////////////////////////////////
// CTI Managers
///////////////////////////////////////////////

struct CtiManager
(
	/** The database ID of this CtiManager */
	string id,
	/** The database ID of the CucmCluster this CtiManager belongs to */
	string cucmClusterId,
	/** The CtiManager name */
	string name,
	/** The IP Address of this CtiManager */
	string ipAddress
)

/**
 * Counts the number of CTI Managers
 * @param cucmClusterId The ID of the cluster we want to count from, set to null to get all managers
 * @return the number of CTI Managers
 * @throws AppException
 */
int countCtiManagers( string cucmClusterId ) throws AppException

/**
 * Gets a list of all the CTI Managers
 * @param cucmClusterId this is the cluster we are looking at, if null it returns them all
 * @param offset the offset of the first item to return.
 * @param count The count of items to return.
 * @return the info for each CTI Manager. If the number of items
 * is < count, then the list is complete. If the number of items
 * == count, then there might be more items starting at offset + count.
 * @throws AppException
 */
CtiManager [] listCtiManagers( string cucmClusterId, int offset, int count ) throws AppException

/**
 * Gets the info for the specified CTI Manager
 * @param id the unique id of the CTI Manager.
 * @return the info of the CTI Manager or null.
 * @throws AppException
 */
CtiManager getCtiManager( string id ) throws AppException

/**
 * Adds the CTI Manager from the supplied info.
 * @param ctiManager the info for the new CTI Manager. 
 * @return the updated CTI Manager info, with all fields set.
 * @throws AppException
 */
CtiManager addCtiManager( CtiManager ctiManager ) throws AppException

/**
 * Updates all fields for this CTI Manager.  
 * @param ctiManager the updated CTI Manager.
 * @throws AppException
 */
void updateCtiManager( CtiManager ctiManager ) throws AppException

/**
 * Deletes the specified CTI Manager.
 * @param id the unique id of the CTI Manager.
 * @throws AppException
 */
void deleteCtiManager( string id ) throws AppException

///////////////////////////////////////////////
// SCCP Subscribers
///////////////////////////////////////////////

struct SccpSubscriber
(
	/** The database ID of this SCCP Subscriber */
	string id,
	/** The database ID of the CucmCluster this SCCP Subscriber belongs to */
	string cucmClusterId,
	/** The SCCP Subscriber name */
	string name,
	/** The IP Address of this SCCP Subscriber */
	string ipAddress
)

/**
 * Counts the number of SCCP Subscriber
 * @param cucmClusterId The ID of the cluster we want to count from, set to null to get all subscribers
 * @return the number of SCCP Subscriber
 * @throws AppException
 */
int countSccpSubscribers( string cucmClusterId ) throws AppException

/**
 * Gets a list of all the SCCP Subscriber
 * @param cucmClusterId this is the cluster we are looking at, if null it returns them all
 * @param offset the offset of the first item to return.
 * @param count The count of items to return.
 * @return the info for each SCCP Subscriber. If the number of items
 * is < count, then the list is complete. If the number of items
 * == count, then there might be more items starting at offset + count.
 * @throws AppException
 */
SccpSubscriber [] listSccpSubscribers( string cucmClusterId, int offset, int count ) throws AppException

/**
 * Gets the info for the specified SCCP Subscribe
 * @param id the unique id of the SCCP Subscriber.
 * @return the info of the SCCP Subscriber.
 * @throws AppException
 */
SccpSubscriber getSccpSubscriber( string id ) throws AppException

/**
 * Adds the SCCP Subscriber from the supplied info.
 * @param sccpSubscriber the info for the new SCCP Subscriber. 
 * @return the updated SCCP Subscriber, with all fields set.
 * @throws AppException
 */
SccpSubscriber addSccpSubscriber( SccpSubscriber sccpSubscriber ) throws AppException

/**
 * Updates all fields for this SCCP Subscriber.  
 * @param sccpSubscriber the updated SCCP Subscriber.
 * @throws AppException
 */
void updateSccpSubscriber( SccpSubscriber sccpSubscriber ) throws AppException

/**
 * Deletes the specified SCCP Subscriber.
 * @param id the unique id of the SCCP Subscriber.
 * @throws AppException
 */
void deleteSccpSubscriber( string id ) throws AppException

///////////////////////////////////////////////
// SCCP Device Pools
///////////////////////////////////////////////

struct SccpDevicePool
(
	/** The database ID of this SCCP Device Pool*/
	string id,
	/** The database ID of the CucmCluster this SCCP DevicePool belongs to */
	string cucmClusterId,
	/** The SCCP DevicePool name */
	string name,
	/** Primary subscriber for the SCCP Device Pool */
	string primarySubscriberName,
	/** Secondary subscriber for the SCCP Device Pool */
	string secondarySubscriberName,
	/** Tertiary subscriber for the SCCP Device Pool */
	string tertiarySubscriberName,
	/** Quaternary subscriber for the SCCP Device Pool */
	string quaternarySubscriberName,
	/** Subscriber assigned as SRST for the SCCP Device Pool */
	string srstName,
	/** Call route group for this device pool */
	string callRouteGroupName
)

/**
 * Counts the number of SCCP DevicePools
 * @param cucmClusterId The ID of the cluster we want to count from, set to null to get all subscribers
 * @return the number of SCCP DevicePools
 * @throws AppException
 */
int countSccpDevicePool( string cucmClusterId ) throws AppException

/**
 * Gets a list of all the SCCP DevicePools
 * @param cucmClusterId this is the cluster we are looking at, if null it returns them all
 * @param offset the offset of the first item to return.
 * @param count The count of items to return.
 * @return the info for each SCCP DevicePools. If the number of items
 * is < count, then the list is complete. If the number of items
 * == count, then there might be more items starting at offset + count.
 * @throws AppException
 */
SccpDevicePool[] listSccpDevicePools( string cucmClusterId, int offset, int count ) throws AppException


/**
 * Gets the info for the specified SCCP DevicePool
 * @param id the unique id of the SCCP DevicePool.
 * @return the info of the SCCP DevicePool.
 * @throws AppException
 */
SccpDevicePool getSccpDevicePool( string id ) throws AppException

/**
 * Adds the SCCP DevicePool from the supplied info.
 * @param sccpDevicePool the info for the new SCCP DevicePool
 * @return the updated SCCP DevicePool, with all fields set.
 * @throws AppException
 */
SccpDevicePool addSccpDevicePool( SccpDevicePool sccpDevicePool ) throws AppException

/**
 * Updates all fields for this SCCP DevicePool.  
 * @param sccpDevicePool the updated SCCP DevicePool.
 * @throws AppException
 */
void updateSccpDevicePool( SccpDevicePool sccpDevicePool ) throws AppException

/**
 * Deletes the specified SCCP DevicePool.
 * @param id the unique id of the SCCP DevicePool.
 * @throws AppException
 */
void deleteSccpDevicePool( string id ) throws AppException
